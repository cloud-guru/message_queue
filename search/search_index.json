{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gi\u1edbi thi\u1ec7u C\u00e1c nghi\u00ean c\u1ee9u li\u00ean quan \u0111\u1ebfn messeage queue Xem online t\u1ea1i: https://cloud-guru.github.io/message_queue/ B\u1ed1 c\u1ee5c mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Index"},{"location":"#gioi-thieu","text":"C\u00e1c nghi\u00ean c\u1ee9u li\u00ean quan \u0111\u1ebfn messeage queue Xem online t\u1ea1i: https://cloud-guru.github.io/message_queue/","title":"Gi\u1edbi thi\u1ec7u"},{"location":"#bo-cuc","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"B\u1ed1 c\u1ee5c"},{"location":"about/contributing/","text":"Project layout project n\u1eb1m t\u1ea1i https://github.com/cloud-guru/message_queue mkdocs.yml # configuration file. docs/ index.md # Documentation homepage. issue/ # Ch\u1ee9a c\u00e1c doc: README.md # Doc m\u00f4 t\u1ea3 v\u1ec1 v\u1ea5n \u0111\u1ec1 propose/ # Doc d\u1ef1 ki\u1ebfn th\u1ef1c hi\u1ec7n in_process/ # Doc \u0111ang th\u1ef1c hi\u1ec7n need_review/ # Doc \u0111\u00e3 ho\u00e0n th\u00e0nh, c\u1ea7n review sloved/ # Doc ho\u00e0n th\u00e0nh about/ contributing.md # H\u01b0\u1edbng d\u1eabn c\u00e1ch \u0111\u00f3ng g\u00f3p v\u00e0o project license.md release-notes.md Commands Clone project: git clone https://github.com/cloud-guru/message_queue.git Install mkdocs: pip install mkdocs Tri\u1ec3n khai: Clone v\u00e0 di chuy\u1ec3n v\u00e0o project: mkdocs gh-deploy - deploy v\u00e0o github . \u0111\u1ec3 c\u00f3 th\u1ec3 xem online (ch\u1ec9 c\u00f3 user thu\u1ed9c cloud-guru m\u1edbi c\u00f3 th\u1ec3 l\u00e0m) mkdocs serve -a 0.0.0.0:8000 - Ph\u1ee5c v\u1ee5 xem local t\u1ea1i c\u1ed5ng 8000 mkdocs help - Print help. xem th\u00eam t\u1ea1i https://mkdocs.org","title":"Contributing"},{"location":"about/contributing/#project-layout","text":"project n\u1eb1m t\u1ea1i https://github.com/cloud-guru/message_queue mkdocs.yml # configuration file. docs/ index.md # Documentation homepage. issue/ # Ch\u1ee9a c\u00e1c doc: README.md # Doc m\u00f4 t\u1ea3 v\u1ec1 v\u1ea5n \u0111\u1ec1 propose/ # Doc d\u1ef1 ki\u1ebfn th\u1ef1c hi\u1ec7n in_process/ # Doc \u0111ang th\u1ef1c hi\u1ec7n need_review/ # Doc \u0111\u00e3 ho\u00e0n th\u00e0nh, c\u1ea7n review sloved/ # Doc ho\u00e0n th\u00e0nh about/ contributing.md # H\u01b0\u1edbng d\u1eabn c\u00e1ch \u0111\u00f3ng g\u00f3p v\u00e0o project license.md release-notes.md","title":"Project layout"},{"location":"about/contributing/#commands","text":"Clone project: git clone https://github.com/cloud-guru/message_queue.git Install mkdocs: pip install mkdocs Tri\u1ec3n khai: Clone v\u00e0 di chuy\u1ec3n v\u00e0o project: mkdocs gh-deploy - deploy v\u00e0o github . \u0111\u1ec3 c\u00f3 th\u1ec3 xem online (ch\u1ec9 c\u00f3 user thu\u1ed9c cloud-guru m\u1edbi c\u00f3 th\u1ec3 l\u00e0m) mkdocs serve -a 0.0.0.0:8000 - Ph\u1ee5c v\u1ee5 xem local t\u1ea1i c\u1ed5ng 8000 mkdocs help - Print help. xem th\u00eam t\u1ea1i https://mkdocs.org","title":"Commands"},{"location":"about/license/","text":"","title":"License"},{"location":"about/release-notes/","text":"","title":"Release Notes"},{"location":"issue/","text":"T\u00ecm hi\u1ec3u c\u00e1c v\u1ea5n \u0111\u1ec1 li\u00ean quan \u0111\u1ebfn messeage queue: c\u01a1 ch\u1ebf, c\u00e1c c\u00f4ng ngh\u1ec7 ph\u1ed5 bi\u1ebfn. Hi\u1ec7n t\u1ea1i, \u0111ang trong qu\u00e1 tr\u00ecnh t\u00ecm hi\u1ec3u v\u1ec1 Qpid dispatch route","title":"Issue describe"},{"location":"issue/in_process/","text":"","title":"In process"},{"location":"issue/need_review/","text":"","title":"Need review"},{"location":"issue/need_review/Kafka/","text":"T\u1ed5ng quan C\u00e0i \u0111\u1eb7t Ki\u1ebfn tr\u00fac kafka C\u00e1c thao t\u00e1c v\u1eadn h\u00e0nh","title":"Kafka"},{"location":"issue/need_review/Kafka/#tong-quan","text":"","title":"T\u1ed5ng quan"},{"location":"issue/need_review/Kafka/#cai-at","text":"","title":"C\u00e0i \u0111\u1eb7t"},{"location":"issue/need_review/Kafka/#kien-truc-kafka","text":"","title":"Ki\u1ebfn tr\u00fac kafka"},{"location":"issue/need_review/Kafka/#cac-thao-tac-van-hanh","text":"","title":"C\u00e1c thao t\u00e1c v\u1eadn h\u00e0nh"},{"location":"issue/need_review/Kafka/Architecture/","text":"T\u1ed5ng quan Th\u00e0nh ph\u1ea7n core c\u1ee7a ki\u1ebfn tr\u00fac kafka l\u00e0 c\u1ee5m c\u00e1c broker, c\u00f3 nhi\u1ec7m v\u1ee5 nh\u1eadn v\u1ec1 c\u00e1c messeage, ph\u00e2n chia logic topic, l\u01b0u tr\u1eef tr\u00ean \u0111\u0129a, nh\u00e2n b\u1ea3n v\u00e0 ph\u1ee5c h\u1ed3i d\u1eef li\u1ec7u gi\u1eefa c\u00e1c node, tr\u1ea3 d\u1eef li\u1ec7u cho consumer khi y\u00eau c\u1ea7u Producer , Consumer l\u00e0 c\u00e1c node ch\u1ea1y c\u00e1c application s\u1eed d\u1ee5ng c\u00e1c API kafka, Producer \u0111\u01b0a d\u1eef li\u1ec7u n\u00f3 thu th\u1eadp \u0111\u01b0\u1ee3c v\u00e0o h\u1ec7 th\u1ed1ng messeage Consumer k\u1ebft n\u1ed1i , subscribe c\u00e1c topic l\u1ea5y messeage v\u1ec1 x\u1eed l\u00fd Zookeeper cung c\u1ea5p m\u1ed9t khung nh\u00ecn \u0111\u1ed3ng b\u1ed9 v\u1ec1 c\u1ea5u h\u00ecnh Kafka Cluster: c\u00f3 c\u00e1c broker n\u00e0o, broker ch\u1ee9a c\u00e1c partition n\u00e0o c\u1ee7a topic, broker n\u00e0o l\u00e0m leader trong c\u00e1c partition topic, topic n\u00e0o \u0111ang t\u1ea1o, x\u00f3a, v\u1ecb tr\u00ed hi\u1ec7n t\u1ea1i, replicate, pending , li\u00ean t\u1ee5c g\u1eedi c\u00e1c thay \u0111\u1ed5i cho kafka T\u1ed5 ch\u1ee9c messeage queue Messeage t\u1ed5 ch\u1ee9c ra c\u00e1c topic. M\u1ed7i topic nh\u01b0 m\u1ed9t ch\u1ee7 \u0111\u1ec1 m\u00e0 producer publish - consumer subscribe . Topic \u0111\u01b0\u1ee3c l\u01b0u th\u00e0nh m\u1ed9t s\u1ed1 partition l\u01b0u v\u00e0o c\u00e1c broker. Vi\u1ec7c ch\u1ecdn cho partition v\u00e0o broker n\u00e0o ho\u00e0n to\u00e0n c\u00f3 th\u1ec3 c\u1ea5u h\u00ecnh ki\u1ec3m so\u00e1t. C\u00e1c message trong m\u1ed7i partition \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp tu\u1ea7n t\u1ef1 (kh\u00f4ng thay \u0111\u1ed5i) gi\u1ed1ng th\u1ee9 t\u1ef1 \u0111\u01b0a l\u00ean Kafka cluster c\u1ee7a c\u00e1c message. M\u1ed7i message trong m\u1ed9t partition \u0111\u01b0\u1ee3c g\u00e1n cho m\u1ed9t \u0111\u1ecbnh danh th\u1ee9 t\u1ef1, \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 m\u1ed9t offset. Theo nh\u01b0 h\u00ecnh, topic l\u01b0u ra 4 partition. Qu\u00e1 tr\u00ecnh vi\u1ebft producer s\u1ebd ph\u1ea3i ch\u1ec9 ra mu\u1ed1n ghi v\u00e0o partition n\u00e0o (m\u1eb7c \u0111\u1ecbnh s\u1ebd ch\u1ecdn theo round robin) . Qu\u00e1 tr\u00ecnh ghi consummer s\u1ebd ph\u1ea3i ch\u1ec9 ra mu\u1ed1n l\u1ea5y t\u1eeb patition v\u00e0 offset n\u00e0o (m\u1eb7c \u0111\u1ecbnh s\u1ebd l\u1ea5y t\u1eeb t\u1ea5t c\u1ea3 part, offset m\u1edbi nh\u1ea5t). V\u1edbi m\u1ed7i partition, t\u00f9y thu\u1ed9c v\u00e0o c\u1ea5u h\u00ecnh s\u1ebd c\u00f3 m\u1ed9t s\u1ed1 b\u1ea3n sao ch\u00e9p nh\u1ea5t \u0111\u1ecbnh \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o d\u1eef li\u1ec7u kh\u00f4ng b\u1ecb m\u1ea5t khi m\u1ed9t node trong c\u1ee5m b\u1ecb h\u1ecfng.M\u1ed7i broker l\u01b0u m\u1ed9t b\u1ea3n sao ,ch\u1ec9 s\u1ed1 replicate kh\u00f4ng \u0111\u01b0\u1ee3c v\u01b0\u1ee3t qu\u00e1 s\u1ed1 l\u01b0\u1ee3ng broker trong c\u1ee5m. B\u1ea3n ch\u00ednh c\u1ee7a partition g\u1ecdi l\u00e0 \u201cleader\u201d. Khi ghi, c\u00e1c b\u1ea3n sao ch\u00e9p t\u1eeb b\u1ea3n leader ch\u1ee9 kh\u00f4ng nh\u1eadn d\u1eef li\u1ec7u tr\u1ef1c ti\u1ebfp t\u1eeb producer ; c\u00e1c b\u1ea3n sao c\u0169ng kh\u00f4ng \u0111\u1ecdc song song b\u1edfi consumer, kh\u00f4ng c\u00f3 vai tr\u00f2 trong vi\u1ec7c t\u1ed1i \u01b0u \u0111\u1ecdc v\u00e0 ghi. Tr\u00ean \u0111\u0129a c\u1ee7a c\u00e1c node broker, topic \u0111\u01b0\u1ee3c l\u01b0u m\u1ee9c th\u1ea5p th\u00e0nh c\u00e1c th\u01b0 m\u1ee5c, file ( g\u1ecdi l\u00e0 logs). Theo defaut th\u01b0 m\u1ee5c l\u01b0u s\u1ebd l\u00e0 /tmp/kafka-logs/ . Trong th\u01b0 m\u1ee5c, m\u1ed7i topic-patition s\u1ebd th\u00e0nh m\u1ed9t th\u01b0 m\u1ee5c con, c\u00e1c message l\u01b0u trong c\u00e1c file log thu\u1ed9c th\u01b0 m\u1ee5c n\u00e0y. M\u1eb7c \u0111\u1ecbnh c\u00e1c logs l\u01b0u trong v\u00f2ng 7 ng\u00e0y (v\u1edbi restart th\u00ec th\u01b0 m\u1ee5c /tmp/ s\u1ebd m\u1ea5t n\u00ean c\u1ea7n ch\u00fa \u00fd c\u1ea5u h\u00ecnh l\u1ea1i) Consumer v\u00e0 Producers Consumer v\u1edbi nhi\u1ec7m v\u1ee5 l\u1ea5y d\u1eef li\u1ec7u t\u1eeb kafka, th\u00ec c\u00f3 th\u1ec3 t\u1ed5 ch\u1ee9c th\u00e0nh c\u00e1c consumer group. M\u1ee5c \u0111\u00edch: t\u0103ng c\u01b0\u1eddng t\u1ed1c \u0111\u1ed9 \u0111\u1ecdc, failover. C\u1ee5 th\u1ec3: Kafka quy \u0111\u1ecbnh: b\u1ea5t k\u1ef3 l\u00fac n\u00e0o, m\u1ed7i partition ch\u1ec9 \u0111\u01b0\u1ee3c 1 consumer trong m\u1ed7i consumer group \u0111\u1ecdc. v\u00ed d\u1ee5: \u1edf h\u00ecnh d\u01b0\u1edbi, topic 1 nh\u1eadn v\u00e0o 4 messeage (m0, m1, m2, m3) th\u00ec s\u1ebd v\u00e0o patition theo s\u1eafp x\u1ebfp: - part0 ch\u1ee9a m0. part1 ch\u1ee9a m1. part2 ch\u1ee9a m2. part3 ch\u1ee9a m3 messesage l\u1ea5y v\u1ec1 c\u00e1c consumer s\u1ebd c\u00f3 v\u1ecb tr\u00ed: - Group1: consummer0 nh\u1eadn m0. consummer1 nh\u1eadn m1. consummer2 nh\u1eadn m2. consummer3 nh\u1eadn m3 - Group2: consummer0 nh\u1eadn m0,m1. consummer0 nh\u1eadn m2,m3 Gi\u1ea3 s\u1eed l\u00e0 c\u00e1c consumer ch\u1ea1y c\u00f9ng ti\u1ebfn tr\u00ecnh spark, nh\u1eadn message v\u1ec1, c\u00f9ng x\u1eed l\u00fd v\u00e0 c\u00f9ng \u0111\u1ea9y k\u1ebft qu\u1ea3 ra m\u1ed9t topic \u0111\u00edch, th\u00ec hi\u1ec7u n\u0103ng x\u1eed l\u00fd s\u1ebd t\u0103ng \u0111\u00e1ng k\u1ec3. V\u00ed d\u1ee5 1 consumer ch\u1ebft, c\u00e1c consumer kh\u00e1c trong group s\u1ebd ti\u1ebfp nh\u1eadn thay c\u00e1c message t\u1eeb message m\u00e0 consumer ch\u1ebft nh\u1eadn \u0111\u01b0\u1ee3c cu\u1ed1i c\u00f9ng = failover Tuy v\u1eady ta th\u1ea5y: theo c\u01a1 ch\u1ebf, kafka kh\u00f4ng track xem consumer \u0111\u00e3 nh\u1eadn \u0111\u01b0\u1ee3c message n\u00e0o, v\u1eady l\u00e0m th\u1ebf n\u00e0o c\u00e1c consumer c\u00f9ng group bi\u1ebft \u0111\u1ec3 takeover? - M\u1ed7i consumer khi \u0111\u1ecdc m\u1ed9t messeage t\u1ea1i offset nh\u1ea5t \u0111\u1ecbnh tr\u00ean partition, s\u1ebd th\u1ef1c hi\u1ec7n thao t\u00e1c g\u1ecdi l\u00e0 commit: ghi offset hi\u1ec7n t\u1ea1i v\u00e0o m\u1ed9t topic \u0111\u1eb7c bi\u1ec7t t\u00ean l\u00e0 __consumer_offsets topic. v\u00ed d\u1ee5: trong tr\u01b0\u1eddng h\u1ee3p tr\u00ean, 2 consumer 3 v\u00e0 4 ch\u1ebft. Kafka rebalance l\u1ea1i ph\u00e2n ph\u1ed1i patititon cho group - Group1: consummer0 n\u1ed1i part0,part3. consummer1 n\u1ed1i part1,part3. nh\u01b0 h\u00ecnh d\u01b0\u1edbi Consumer v\u00e0o l\u00e0m vi\u1ec7c, s\u1ebd l\u1ea5y v\u00e0o latest committed offset c\u1ee7a m\u1ed1i partition t\u1eeb __consumer_offsets topic v\u00e0 takeover Ch\u00fa \u00fd r\u1eb1ng: nhi\u1ec7m v\u1ee5 commit thu\u1ed9c v\u1ec1 ph\u00eda consumer, t\u1ee9c ng\u01b0\u1eddi l\u1eadp tr\u00ecnh ra \u1ee9ng d\u1ee5ng, kafka broker kh\u00f4ng c\u00f3 nhi\u1ec7m v\u1ee5 g\u00ec trong n\u00e0y (ngo\u00e0i t\u1ef1 \u0111\u1ed9ng t\u1ea1o ra __consumer_offsets topic). Vi\u1ec7c commit c\u00f3 th\u1ec3 \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn k\u1ebft qu\u1ea3 x\u1eed l\u00fd, vd: Th\u1ef1c t\u1ebf \u0111ang x\u1eed l\u00fd t\u1edbi offset 10, trong khi m\u1edbi commit t\u1edbi offset 2. Khi l\u1ed7i x\u1ea3y ra bu\u1ed9c ta l\u1ea1i quay l\u1ea1i offset 2 x\u1eed l\u00fd. \u0110\u00e2y c\u00f3 th\u1ec3 l\u00e0 l\u1ed7i - khi m\u1ed9t messeage b\u1ecb x\u1eed l\u00fd 2 l\u1ea7n; c\u0169ng c\u00f3 th\u1ec3 l\u00e0 t\u00ednh n\u0103ng: -v\u1eadn d\u1ee5ng h\u1ee3p l\u00fd s\u1ebd nh\u01b0 m\u1ed9t \u0111i\u1ec3m checkpoint cho lu\u1ed3ng, m\u1ee5c \u0111\u00edch l\u00e0 khi l\u1ed7i s\u1ebd roolback \u0111\u1ec3 x\u1eed l\u00fd l\u1ea1i \u0111o\u1ea1n 2 \u0111\u1ebfn 10. Producer v\u1edbi nhi\u1ec7m v\u1ee5 \u0111\u1ea9y d\u1eef li\u1ec7u v\u00e0o kafka. C\u00f3 m\u1ed9t s\u1ed1 \u0111i\u1ec3m \u0111\u00e1ng ch\u00fa \u00fd sau: Kafka cung c\u1ea5p c\u01a1 ch\u1ebf cho producer \u0111\u1ee3i messeage v\u1eeba g\u1eedi \u0111i \u0111\u1ebfn c\u00e1c m\u1ee9c level: Ack = all: \u0111\u1ee3i cho leader v\u00e0 t\u1ea5t c\u1ea3 c\u00e1c replicate \u0111\u00e3 ghi r\u1ed3i g\u1eedi ti\u1ebfp messeage kh\u00e1c Ack = 1: ch\u1ec9 \u0111\u1ee3i leader x\u00e1c nh\u1eadn \u0111\u00e3 ghi Ack = 0: kh\u00f4ng \u0111\u1ee3i, g\u1eedi lu\u00f4n messeage kh\u00e1c Kafka cung c\u1ea5p c\u01a1 ch\u1ebf t\u1ea1o c\u00e1c producer v\u1edbi 2 mode \u0111\u1eb7c bi\u1ec7t: Idempotent : \u0111\u1ea3m v\u1edbi 1 messeage y\u00eau c\u1ea7u ghi th\u00ec ch\u1ec9 \u0111\u00fang 1 messeage xu\u1ea5t hi\u1ec7n trong topic Transactional : \u0111\u1ea3m b\u1ea3o m\u1ed9t nh\u00f3m c\u00e1c messeage c\u00f9ng \u0111\u01b0\u1ee3c g\u1eedi v\u1edbi nhau. Zookeeper Ki\u1ebfn tr\u00fac zookeeper HA v\u1edbi zookeeper Ref http://cloudurable.com/blog/kafka-architecture/index.html https://kafka.apache.org/documentation/ https://www.oreilly.com/library/view/kafka-the-definitive/9781491936153/ch04.html","title":"T\u1ed5ng quan"},{"location":"issue/need_review/Kafka/Architecture/#tong-quan","text":"Th\u00e0nh ph\u1ea7n core c\u1ee7a ki\u1ebfn tr\u00fac kafka l\u00e0 c\u1ee5m c\u00e1c broker, c\u00f3 nhi\u1ec7m v\u1ee5 nh\u1eadn v\u1ec1 c\u00e1c messeage, ph\u00e2n chia logic topic, l\u01b0u tr\u1eef tr\u00ean \u0111\u0129a, nh\u00e2n b\u1ea3n v\u00e0 ph\u1ee5c h\u1ed3i d\u1eef li\u1ec7u gi\u1eefa c\u00e1c node, tr\u1ea3 d\u1eef li\u1ec7u cho consumer khi y\u00eau c\u1ea7u Producer , Consumer l\u00e0 c\u00e1c node ch\u1ea1y c\u00e1c application s\u1eed d\u1ee5ng c\u00e1c API kafka, Producer \u0111\u01b0a d\u1eef li\u1ec7u n\u00f3 thu th\u1eadp \u0111\u01b0\u1ee3c v\u00e0o h\u1ec7 th\u1ed1ng messeage Consumer k\u1ebft n\u1ed1i , subscribe c\u00e1c topic l\u1ea5y messeage v\u1ec1 x\u1eed l\u00fd Zookeeper cung c\u1ea5p m\u1ed9t khung nh\u00ecn \u0111\u1ed3ng b\u1ed9 v\u1ec1 c\u1ea5u h\u00ecnh Kafka Cluster: c\u00f3 c\u00e1c broker n\u00e0o, broker ch\u1ee9a c\u00e1c partition n\u00e0o c\u1ee7a topic, broker n\u00e0o l\u00e0m leader trong c\u00e1c partition topic, topic n\u00e0o \u0111ang t\u1ea1o, x\u00f3a, v\u1ecb tr\u00ed hi\u1ec7n t\u1ea1i, replicate, pending , li\u00ean t\u1ee5c g\u1eedi c\u00e1c thay \u0111\u1ed5i cho kafka","title":"T\u1ed5ng quan"},{"location":"issue/need_review/Kafka/Architecture/#to-chuc-messeage-queue","text":"Messeage t\u1ed5 ch\u1ee9c ra c\u00e1c topic. M\u1ed7i topic nh\u01b0 m\u1ed9t ch\u1ee7 \u0111\u1ec1 m\u00e0 producer publish - consumer subscribe . Topic \u0111\u01b0\u1ee3c l\u01b0u th\u00e0nh m\u1ed9t s\u1ed1 partition l\u01b0u v\u00e0o c\u00e1c broker. Vi\u1ec7c ch\u1ecdn cho partition v\u00e0o broker n\u00e0o ho\u00e0n to\u00e0n c\u00f3 th\u1ec3 c\u1ea5u h\u00ecnh ki\u1ec3m so\u00e1t. C\u00e1c message trong m\u1ed7i partition \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp tu\u1ea7n t\u1ef1 (kh\u00f4ng thay \u0111\u1ed5i) gi\u1ed1ng th\u1ee9 t\u1ef1 \u0111\u01b0a l\u00ean Kafka cluster c\u1ee7a c\u00e1c message. M\u1ed7i message trong m\u1ed9t partition \u0111\u01b0\u1ee3c g\u00e1n cho m\u1ed9t \u0111\u1ecbnh danh th\u1ee9 t\u1ef1, \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 m\u1ed9t offset. Theo nh\u01b0 h\u00ecnh, topic l\u01b0u ra 4 partition. Qu\u00e1 tr\u00ecnh vi\u1ebft producer s\u1ebd ph\u1ea3i ch\u1ec9 ra mu\u1ed1n ghi v\u00e0o partition n\u00e0o (m\u1eb7c \u0111\u1ecbnh s\u1ebd ch\u1ecdn theo round robin) . Qu\u00e1 tr\u00ecnh ghi consummer s\u1ebd ph\u1ea3i ch\u1ec9 ra mu\u1ed1n l\u1ea5y t\u1eeb patition v\u00e0 offset n\u00e0o (m\u1eb7c \u0111\u1ecbnh s\u1ebd l\u1ea5y t\u1eeb t\u1ea5t c\u1ea3 part, offset m\u1edbi nh\u1ea5t). V\u1edbi m\u1ed7i partition, t\u00f9y thu\u1ed9c v\u00e0o c\u1ea5u h\u00ecnh s\u1ebd c\u00f3 m\u1ed9t s\u1ed1 b\u1ea3n sao ch\u00e9p nh\u1ea5t \u0111\u1ecbnh \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o d\u1eef li\u1ec7u kh\u00f4ng b\u1ecb m\u1ea5t khi m\u1ed9t node trong c\u1ee5m b\u1ecb h\u1ecfng.M\u1ed7i broker l\u01b0u m\u1ed9t b\u1ea3n sao ,ch\u1ec9 s\u1ed1 replicate kh\u00f4ng \u0111\u01b0\u1ee3c v\u01b0\u1ee3t qu\u00e1 s\u1ed1 l\u01b0\u1ee3ng broker trong c\u1ee5m. B\u1ea3n ch\u00ednh c\u1ee7a partition g\u1ecdi l\u00e0 \u201cleader\u201d. Khi ghi, c\u00e1c b\u1ea3n sao ch\u00e9p t\u1eeb b\u1ea3n leader ch\u1ee9 kh\u00f4ng nh\u1eadn d\u1eef li\u1ec7u tr\u1ef1c ti\u1ebfp t\u1eeb producer ; c\u00e1c b\u1ea3n sao c\u0169ng kh\u00f4ng \u0111\u1ecdc song song b\u1edfi consumer, kh\u00f4ng c\u00f3 vai tr\u00f2 trong vi\u1ec7c t\u1ed1i \u01b0u \u0111\u1ecdc v\u00e0 ghi. Tr\u00ean \u0111\u0129a c\u1ee7a c\u00e1c node broker, topic \u0111\u01b0\u1ee3c l\u01b0u m\u1ee9c th\u1ea5p th\u00e0nh c\u00e1c th\u01b0 m\u1ee5c, file ( g\u1ecdi l\u00e0 logs). Theo defaut th\u01b0 m\u1ee5c l\u01b0u s\u1ebd l\u00e0 /tmp/kafka-logs/ . Trong th\u01b0 m\u1ee5c, m\u1ed7i topic-patition s\u1ebd th\u00e0nh m\u1ed9t th\u01b0 m\u1ee5c con, c\u00e1c message l\u01b0u trong c\u00e1c file log thu\u1ed9c th\u01b0 m\u1ee5c n\u00e0y. M\u1eb7c \u0111\u1ecbnh c\u00e1c logs l\u01b0u trong v\u00f2ng 7 ng\u00e0y (v\u1edbi restart th\u00ec th\u01b0 m\u1ee5c /tmp/ s\u1ebd m\u1ea5t n\u00ean c\u1ea7n ch\u00fa \u00fd c\u1ea5u h\u00ecnh l\u1ea1i)","title":"T\u1ed5 ch\u1ee9c messeage queue"},{"location":"issue/need_review/Kafka/Architecture/#consumer-va-producers","text":"Consumer v\u1edbi nhi\u1ec7m v\u1ee5 l\u1ea5y d\u1eef li\u1ec7u t\u1eeb kafka, th\u00ec c\u00f3 th\u1ec3 t\u1ed5 ch\u1ee9c th\u00e0nh c\u00e1c consumer group. M\u1ee5c \u0111\u00edch: t\u0103ng c\u01b0\u1eddng t\u1ed1c \u0111\u1ed9 \u0111\u1ecdc, failover. C\u1ee5 th\u1ec3: Kafka quy \u0111\u1ecbnh: b\u1ea5t k\u1ef3 l\u00fac n\u00e0o, m\u1ed7i partition ch\u1ec9 \u0111\u01b0\u1ee3c 1 consumer trong m\u1ed7i consumer group \u0111\u1ecdc. v\u00ed d\u1ee5: \u1edf h\u00ecnh d\u01b0\u1edbi, topic 1 nh\u1eadn v\u00e0o 4 messeage (m0, m1, m2, m3) th\u00ec s\u1ebd v\u00e0o patition theo s\u1eafp x\u1ebfp: - part0 ch\u1ee9a m0. part1 ch\u1ee9a m1. part2 ch\u1ee9a m2. part3 ch\u1ee9a m3 messesage l\u1ea5y v\u1ec1 c\u00e1c consumer s\u1ebd c\u00f3 v\u1ecb tr\u00ed: - Group1: consummer0 nh\u1eadn m0. consummer1 nh\u1eadn m1. consummer2 nh\u1eadn m2. consummer3 nh\u1eadn m3 - Group2: consummer0 nh\u1eadn m0,m1. consummer0 nh\u1eadn m2,m3 Gi\u1ea3 s\u1eed l\u00e0 c\u00e1c consumer ch\u1ea1y c\u00f9ng ti\u1ebfn tr\u00ecnh spark, nh\u1eadn message v\u1ec1, c\u00f9ng x\u1eed l\u00fd v\u00e0 c\u00f9ng \u0111\u1ea9y k\u1ebft qu\u1ea3 ra m\u1ed9t topic \u0111\u00edch, th\u00ec hi\u1ec7u n\u0103ng x\u1eed l\u00fd s\u1ebd t\u0103ng \u0111\u00e1ng k\u1ec3. V\u00ed d\u1ee5 1 consumer ch\u1ebft, c\u00e1c consumer kh\u00e1c trong group s\u1ebd ti\u1ebfp nh\u1eadn thay c\u00e1c message t\u1eeb message m\u00e0 consumer ch\u1ebft nh\u1eadn \u0111\u01b0\u1ee3c cu\u1ed1i c\u00f9ng = failover Tuy v\u1eady ta th\u1ea5y: theo c\u01a1 ch\u1ebf, kafka kh\u00f4ng track xem consumer \u0111\u00e3 nh\u1eadn \u0111\u01b0\u1ee3c message n\u00e0o, v\u1eady l\u00e0m th\u1ebf n\u00e0o c\u00e1c consumer c\u00f9ng group bi\u1ebft \u0111\u1ec3 takeover? - M\u1ed7i consumer khi \u0111\u1ecdc m\u1ed9t messeage t\u1ea1i offset nh\u1ea5t \u0111\u1ecbnh tr\u00ean partition, s\u1ebd th\u1ef1c hi\u1ec7n thao t\u00e1c g\u1ecdi l\u00e0 commit: ghi offset hi\u1ec7n t\u1ea1i v\u00e0o m\u1ed9t topic \u0111\u1eb7c bi\u1ec7t t\u00ean l\u00e0 __consumer_offsets topic. v\u00ed d\u1ee5: trong tr\u01b0\u1eddng h\u1ee3p tr\u00ean, 2 consumer 3 v\u00e0 4 ch\u1ebft. Kafka rebalance l\u1ea1i ph\u00e2n ph\u1ed1i patititon cho group - Group1: consummer0 n\u1ed1i part0,part3. consummer1 n\u1ed1i part1,part3. nh\u01b0 h\u00ecnh d\u01b0\u1edbi Consumer v\u00e0o l\u00e0m vi\u1ec7c, s\u1ebd l\u1ea5y v\u00e0o latest committed offset c\u1ee7a m\u1ed1i partition t\u1eeb __consumer_offsets topic v\u00e0 takeover Ch\u00fa \u00fd r\u1eb1ng: nhi\u1ec7m v\u1ee5 commit thu\u1ed9c v\u1ec1 ph\u00eda consumer, t\u1ee9c ng\u01b0\u1eddi l\u1eadp tr\u00ecnh ra \u1ee9ng d\u1ee5ng, kafka broker kh\u00f4ng c\u00f3 nhi\u1ec7m v\u1ee5 g\u00ec trong n\u00e0y (ngo\u00e0i t\u1ef1 \u0111\u1ed9ng t\u1ea1o ra __consumer_offsets topic). Vi\u1ec7c commit c\u00f3 th\u1ec3 \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn k\u1ebft qu\u1ea3 x\u1eed l\u00fd, vd: Th\u1ef1c t\u1ebf \u0111ang x\u1eed l\u00fd t\u1edbi offset 10, trong khi m\u1edbi commit t\u1edbi offset 2. Khi l\u1ed7i x\u1ea3y ra bu\u1ed9c ta l\u1ea1i quay l\u1ea1i offset 2 x\u1eed l\u00fd. \u0110\u00e2y c\u00f3 th\u1ec3 l\u00e0 l\u1ed7i - khi m\u1ed9t messeage b\u1ecb x\u1eed l\u00fd 2 l\u1ea7n; c\u0169ng c\u00f3 th\u1ec3 l\u00e0 t\u00ednh n\u0103ng: -v\u1eadn d\u1ee5ng h\u1ee3p l\u00fd s\u1ebd nh\u01b0 m\u1ed9t \u0111i\u1ec3m checkpoint cho lu\u1ed3ng, m\u1ee5c \u0111\u00edch l\u00e0 khi l\u1ed7i s\u1ebd roolback \u0111\u1ec3 x\u1eed l\u00fd l\u1ea1i \u0111o\u1ea1n 2 \u0111\u1ebfn 10. Producer v\u1edbi nhi\u1ec7m v\u1ee5 \u0111\u1ea9y d\u1eef li\u1ec7u v\u00e0o kafka. C\u00f3 m\u1ed9t s\u1ed1 \u0111i\u1ec3m \u0111\u00e1ng ch\u00fa \u00fd sau: Kafka cung c\u1ea5p c\u01a1 ch\u1ebf cho producer \u0111\u1ee3i messeage v\u1eeba g\u1eedi \u0111i \u0111\u1ebfn c\u00e1c m\u1ee9c level: Ack = all: \u0111\u1ee3i cho leader v\u00e0 t\u1ea5t c\u1ea3 c\u00e1c replicate \u0111\u00e3 ghi r\u1ed3i g\u1eedi ti\u1ebfp messeage kh\u00e1c Ack = 1: ch\u1ec9 \u0111\u1ee3i leader x\u00e1c nh\u1eadn \u0111\u00e3 ghi Ack = 0: kh\u00f4ng \u0111\u1ee3i, g\u1eedi lu\u00f4n messeage kh\u00e1c Kafka cung c\u1ea5p c\u01a1 ch\u1ebf t\u1ea1o c\u00e1c producer v\u1edbi 2 mode \u0111\u1eb7c bi\u1ec7t: Idempotent : \u0111\u1ea3m v\u1edbi 1 messeage y\u00eau c\u1ea7u ghi th\u00ec ch\u1ec9 \u0111\u00fang 1 messeage xu\u1ea5t hi\u1ec7n trong topic Transactional : \u0111\u1ea3m b\u1ea3o m\u1ed9t nh\u00f3m c\u00e1c messeage c\u00f9ng \u0111\u01b0\u1ee3c g\u1eedi v\u1edbi nhau.","title":"Consumer v\u00e0 Producers"},{"location":"issue/need_review/Kafka/Architecture/#zookeeper","text":"","title":"Zookeeper"},{"location":"issue/need_review/Kafka/Architecture/#kien-truc-zookeeper","text":"","title":"Ki\u1ebfn tr\u00fac zookeeper"},{"location":"issue/need_review/Kafka/Architecture/#ha-voi-zookeeper","text":"","title":"HA v\u1edbi zookeeper"},{"location":"issue/need_review/Kafka/Architecture/#ref","text":"http://cloudurable.com/blog/kafka-architecture/index.html https://kafka.apache.org/documentation/ https://www.oreilly.com/library/view/kafka-the-definitive/9781491936153/ch04.html","title":"Ref"},{"location":"issue/need_review/Kafka/Intro/","text":"T\u1ed5ng quan Kh\u00e1i ni\u1ec7m: Kafka is a publish-subscribe distributed, partitioned, replicated commit log service. It provides the functionality of a messaging system, but with a unique design. Ho\u1ea1t \u0111\u1ed9ng c\u01a1 b\u1ea3n: Kafka l\u01b0u tr\u1eef c\u00e1c message th\u00e0nh c\u00e1c category g\u1ecdi l\u00e0 topic Kafka \u0111\u01b0\u1ee3c tri\u1ec3n khai theo m\u00f4 h\u00ecnh cluster g\u1ed3m m\u1ed9t ho\u1eb7c nhi\u1ec1u server. M\u1ed7i server trong cluster n\u00e0y \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 m\u1ed9t broker , nhi\u1ec7m v\u1ee5 nh\u01b0 m\u1ed9t kho l\u01b0u tr\u1eef c\u00e1c message. Ch\u00fang ta s\u1ebd s\u1eed d\u1ee5ng m\u1ed9t ti\u1ebfn tr\u00ecnh \u0111\u1ec3 \u0111\u01b0a d\u1eef li\u1ec7u message v\u00e0o Kafka. Ti\u1ebfn tr\u00ecnh n\u00e0y g\u1ecdi l\u00e0 producer. Ch\u00fang ta s\u1ebd s\u1eed d\u1ee5ng m\u1ed9t ti\u1ebfn tr\u00ecnh \u0111\u1ec3 l\u1ea5y d\u1eef li\u1ec7u message t\u1eeb Kafka. Ti\u1ebfn tr\u00ecnh n\u00e0y g\u1ecdi l\u00e0 consumer. Producer, consumer c\u00f3 th\u1ec3 kh\u1edfi \u0111\u1ed9ng nh\u1eefng tool nh\u01b0 console_producer, console_consumer kafka cung c\u1ea5p, hay c\u00e1c application t\u1ef1 vi\u1ebft d\u00f9ng c\u00e1c api. C\u00e1c application s\u1eed d\u1ee5ng c\u00e1c 4 lo\u1ea1i API (Producer API, Consumer API, Streams API v\u00e0 Connector API) th\u1ef1c hi\u1ec7n c\u00e1c t\u01b0\u01a1ng t\u00e1c mong mu\u1ed1n . \u0110\u1eb7c tr\u01b0ng Publish-Subscribe Messaging System Ta c\u00f3 2 lo\u1ea1i h\u1ec7 th\u1ed1ng messeages truy\u1ec1n th\u1ed1ng: - V\u1edbi nh\u1eefng h\u1ec7 th\u1ed1ng Queuing . Messages t\u1ed5 ch\u1ee9c th\u00e0nh c\u00e1c queue, m\u1ed9t ho\u1eb7c nhi\u1ec1u consummer l\u1ea5y message t\u1eeb queue v\u00e0 ch\u1ee7 \u0111\u1ed9ng x\u00f3a messeage \u0111\u00f3 kh\u1ecfi queue. - V\u1edbi nh\u1eefng h\u1ec7 th\u1ed1ng Publish-Subscribe . Messeages t\u1ed5 ch\u1ee9c th\u00e0nh m\u1ed9t ho\u1eb7c nhi\u1ec1u topic. Consumers c\u00f3 th\u1ec3 ch\u1ecdn subscribe c\u00e1c toppic m\u00e0 m\u00ecnh mu\u1ed1n \u0111\u1ecdc. Kafka mang \u0111\u1eb7c \u0111i\u1ec3m c\u1ee7a h\u1ec7 Publish-Subscribe nh\u01b0ng c\u00f3 \u0111i\u1ec3m \u0111\u1eb7c bi\u1ec7t: - V\u1edbi h\u1ec7 th\u1ed1ng Publish-Subscribe truy\u1ec1n th\u1ed1ng, m\u1ed7i messeage s\u1ebd \u0111\u01b0\u1ee3c broad cast ra cho t\u1ea5t c\u1ea3 c\u00e1c consumer. vd: n\u1ebfu messeage \u0111\u1ebfn l\u00e0 m1, m2, m3. c\u00e1c consumer s\u1ebd \u0111\u1ec1u nh\u1eadn \u0111\u01b0\u1ee3c m1, m2, m3 - V\u1edbi kafka, cho ph\u00e9p c\u01a1 ch\u1ebf nh\u00f3m c\u00e1c consumer \u0111\u1ec3 m\u1ed7i consumer trong nh\u00f3m c\u00f3 th\u1ec3 nh\u1eadn m\u1ed9t ph\u1ea7n lu\u1ed3ng tin. vd: n\u1ebfu messeage \u0111\u1ebfn l\u00e0 m1, m2, m3. cho ph\u00e9p consummer1 nh\u1eadn m1, consumer2 nh\u1eadn m2 , consumer 3 nh\u1eadn m3. (v\u1edbi \u0111i\u1ec1u ki\u1ec7n consumer 1, 2, 3 c\u00f9ng group; n\u1ebfu kh\u00e1c group, messeage s\u1ebd broad cast nh\u01b0 b\u00ecnh th\u01b0\u1eddng) M\u1ee5c \u0111\u00edch vi\u1ec7c n\u00e0y l\u00e0 gi\u00fap cho scale process x\u1eed l\u00fd c\u1ee7a consumer, chia ra m\u1ed7i consumer x\u1eed l\u00fd m\u1ed9t ph\u1ea7n c\u1ee7a lu\u1ed3ng messeage. Kafka s\u1ebd kh\u00f4ng th\u1ef1c hi\u1ec7n: - Theo d\u00f5i xem topic ch\u1ec9 gi\u1edbi h\u1ea1n cho consumer n\u00e0o nh\u1eadn ,hay consumer \u0111\u00e3 nh\u1eadn \u0111\u01b0\u1ee3c message ch\u01b0a (no check ack form consumer). - Kh\u00f4ng c\u00f3 thao t\u00e1c delete, messeages s\u1ebd \u0111\u01b0\u1ee3c gi\u1eef trong kho\u1ea3ng th\u1eddi gian x\u00e1c \u0111\u1ecbnh v\u00e0 t\u1ef1 \u0111\u1ed9ng x\u00f3a. - Kh\u00f4ng random access v\u00e0o t\u1eebng messeage. Consumers ch\u1ec9 ra s\u1ebd nh\u1eadn messeage t\u1eeb offset bao nhi\u00eau c\u1ee7a topic th\u00ec s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c c\u00e1c message, b\u1eaft \u0111\u1ea7u t\u1eeb offset \u0111\u00f3. Nh\u01b0 v\u1eady, tr\u00e1ch nhi\u1ec7m c\u1ee7a consumer trong x\u1eed l\u00fd d\u1eef li\u1ec7u t\u1eeb kafka l\u00e0 r\u1ea5t l\u1edbn. Kafka kh\u00f4ng c\u00f3 tr\u00e1ch nhi\u1ec7m push() messeage cho consumer, m\u00e0 consumer s\u1ebd poll() messeage c\u1ea7n v\u1ec1, t\u00f9y theo n\u0103ng l\u1ef1c x\u1eed l\u00fd c\u1ee7a n\u00f3. M\u1ed9t s\u1ed1 th\u1ea3o lu\u1eadn v\u1ec1 \u0111i\u1ec1u n\u00e0y https://www.quora.com/How-do-I-verify-if-Kafka-Consumer-consumed-messages T\u1ed1c \u0111\u1ed9 nhanh V\u1edbi m\u1ed9t m\u00e1y \u0111\u01a1n c\u00e0i \u0111\u1eb7t Kafka c\u00f3 th\u1ec3 x\u1eed l\u00fd s\u1ed1 l\u01b0\u1ee3ng d\u1eef li\u1ec7u t\u1eeb vi\u1ec7c \u0111\u1ecdc v\u00e0 ghi l\u00ean t\u1edbi h\u00e0ng tr\u0103m megabyte trong m\u1ed9t gi\u00e2y t\u1eeb h\u00e0ng ng\u00e0n m\u00e1y kh\u00e1ch. vd benchmark cho kafka tr\u00ean c\u00e1c h\u1ec7 th\u1ed1ng cloud: theo https://hackernoon.com/benchmarking-kafka-performance-part-1-write-throughput-7c7a76ab7db1 Kh\u1ea3 n\u0103ng m\u1edf r\u1ed9ng: Kafka \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf cho ph\u00e9p d\u1ec5 d\u00e0ng \u0111\u01b0\u1ee3c m\u1edf r\u1ed9ng v\u00e0 trong su\u1ed1t v\u1edbi ng\u01b0\u1eddi d\u00f9ng (kh\u00f4ng downtime khi th\u00eam m\u1ed9t n\u00fat m\u00e1y ch\u1ee7 m\u1edbi v\u00e0o c\u1ee5m). Lu\u1ed3ng d\u1eef li\u1ec7u s\u1ebd \u0111\u01b0\u1ee3c ph\u00e2n chia v\u00e0 \u0111\u01b0\u1ee3c v\u1eadn chuy\u1ec3n t\u1edbi c\u00e1c n\u00fat trong c\u1ee5m, do \u0111\u00f3 cho ph\u00e9p trung chuy\u1ec3n c\u00e1c d\u1eef li\u1ec7u m\u00e0 c\u00f3 kh\u1ed1i l\u01b0\u1ee3ng l\u1edbn h\u01a1n nhi\u1ec1u so v\u1edbi s\u1ee9c ch\u1ee9a c\u1ee7a m\u1ed9t m\u00e1y \u0111\u01a1n. \u0110\u1ed9 tin c\u1eady: D\u1eef li\u1ec7u v\u00e0o h\u00e0ng \u0111\u1ee3i s\u1ebd \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef tr\u00ean \u1ed5 \u0111\u0129a v\u00e0 \u0111\u01b0\u1ee3c sao ch\u00e9p t\u1edbi c\u00e1c n\u00fat kh\u00e1c trong c\u1ee5m \u0111\u1ec3 ng\u0103n ng\u1eeba vi\u1ec7c m\u1ea5t d\u1eef li\u1ec7u, \u0111\u1ea3m b\u1ea3o t\u00ednh ch\u1ecbu l\u1ed7i cao. Reference https://techbeacon.com/what-apache-kafka-why-it-so-popular-should-you-use-it https://www.confluent.io/blog/apache-kafka-vs-enterprise-service-bus-esb-friends-enemies-or-frenemies/?fbclid=IwAR3A_Lcl7sgRTinzJUUwyQwNBm8V_3vCokFXuZcomXD1NlPNDmpb34f41po https://www.tutorialspoint.com/apache_kafka/index.htm https://dzone.com/articles/understanding-kafka-consumer-groups-and-consumer-l https://kafka.apache.org/","title":"T\u1ed5ng quan"},{"location":"issue/need_review/Kafka/Intro/#tong-quan","text":"Kh\u00e1i ni\u1ec7m: Kafka is a publish-subscribe distributed, partitioned, replicated commit log service. It provides the functionality of a messaging system, but with a unique design. Ho\u1ea1t \u0111\u1ed9ng c\u01a1 b\u1ea3n: Kafka l\u01b0u tr\u1eef c\u00e1c message th\u00e0nh c\u00e1c category g\u1ecdi l\u00e0 topic Kafka \u0111\u01b0\u1ee3c tri\u1ec3n khai theo m\u00f4 h\u00ecnh cluster g\u1ed3m m\u1ed9t ho\u1eb7c nhi\u1ec1u server. M\u1ed7i server trong cluster n\u00e0y \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 m\u1ed9t broker , nhi\u1ec7m v\u1ee5 nh\u01b0 m\u1ed9t kho l\u01b0u tr\u1eef c\u00e1c message. Ch\u00fang ta s\u1ebd s\u1eed d\u1ee5ng m\u1ed9t ti\u1ebfn tr\u00ecnh \u0111\u1ec3 \u0111\u01b0a d\u1eef li\u1ec7u message v\u00e0o Kafka. Ti\u1ebfn tr\u00ecnh n\u00e0y g\u1ecdi l\u00e0 producer. Ch\u00fang ta s\u1ebd s\u1eed d\u1ee5ng m\u1ed9t ti\u1ebfn tr\u00ecnh \u0111\u1ec3 l\u1ea5y d\u1eef li\u1ec7u message t\u1eeb Kafka. Ti\u1ebfn tr\u00ecnh n\u00e0y g\u1ecdi l\u00e0 consumer. Producer, consumer c\u00f3 th\u1ec3 kh\u1edfi \u0111\u1ed9ng nh\u1eefng tool nh\u01b0 console_producer, console_consumer kafka cung c\u1ea5p, hay c\u00e1c application t\u1ef1 vi\u1ebft d\u00f9ng c\u00e1c api. C\u00e1c application s\u1eed d\u1ee5ng c\u00e1c 4 lo\u1ea1i API (Producer API, Consumer API, Streams API v\u00e0 Connector API) th\u1ef1c hi\u1ec7n c\u00e1c t\u01b0\u01a1ng t\u00e1c mong mu\u1ed1n .","title":"T\u1ed5ng quan"},{"location":"issue/need_review/Kafka/Intro/#ac-trung","text":"","title":"\u0110\u1eb7c tr\u01b0ng"},{"location":"issue/need_review/Kafka/Intro/#publish-subscribe-messaging-system","text":"Ta c\u00f3 2 lo\u1ea1i h\u1ec7 th\u1ed1ng messeages truy\u1ec1n th\u1ed1ng: - V\u1edbi nh\u1eefng h\u1ec7 th\u1ed1ng Queuing . Messages t\u1ed5 ch\u1ee9c th\u00e0nh c\u00e1c queue, m\u1ed9t ho\u1eb7c nhi\u1ec1u consummer l\u1ea5y message t\u1eeb queue v\u00e0 ch\u1ee7 \u0111\u1ed9ng x\u00f3a messeage \u0111\u00f3 kh\u1ecfi queue. - V\u1edbi nh\u1eefng h\u1ec7 th\u1ed1ng Publish-Subscribe . Messeages t\u1ed5 ch\u1ee9c th\u00e0nh m\u1ed9t ho\u1eb7c nhi\u1ec1u topic. Consumers c\u00f3 th\u1ec3 ch\u1ecdn subscribe c\u00e1c toppic m\u00e0 m\u00ecnh mu\u1ed1n \u0111\u1ecdc. Kafka mang \u0111\u1eb7c \u0111i\u1ec3m c\u1ee7a h\u1ec7 Publish-Subscribe nh\u01b0ng c\u00f3 \u0111i\u1ec3m \u0111\u1eb7c bi\u1ec7t: - V\u1edbi h\u1ec7 th\u1ed1ng Publish-Subscribe truy\u1ec1n th\u1ed1ng, m\u1ed7i messeage s\u1ebd \u0111\u01b0\u1ee3c broad cast ra cho t\u1ea5t c\u1ea3 c\u00e1c consumer. vd: n\u1ebfu messeage \u0111\u1ebfn l\u00e0 m1, m2, m3. c\u00e1c consumer s\u1ebd \u0111\u1ec1u nh\u1eadn \u0111\u01b0\u1ee3c m1, m2, m3 - V\u1edbi kafka, cho ph\u00e9p c\u01a1 ch\u1ebf nh\u00f3m c\u00e1c consumer \u0111\u1ec3 m\u1ed7i consumer trong nh\u00f3m c\u00f3 th\u1ec3 nh\u1eadn m\u1ed9t ph\u1ea7n lu\u1ed3ng tin. vd: n\u1ebfu messeage \u0111\u1ebfn l\u00e0 m1, m2, m3. cho ph\u00e9p consummer1 nh\u1eadn m1, consumer2 nh\u1eadn m2 , consumer 3 nh\u1eadn m3. (v\u1edbi \u0111i\u1ec1u ki\u1ec7n consumer 1, 2, 3 c\u00f9ng group; n\u1ebfu kh\u00e1c group, messeage s\u1ebd broad cast nh\u01b0 b\u00ecnh th\u01b0\u1eddng) M\u1ee5c \u0111\u00edch vi\u1ec7c n\u00e0y l\u00e0 gi\u00fap cho scale process x\u1eed l\u00fd c\u1ee7a consumer, chia ra m\u1ed7i consumer x\u1eed l\u00fd m\u1ed9t ph\u1ea7n c\u1ee7a lu\u1ed3ng messeage. Kafka s\u1ebd kh\u00f4ng th\u1ef1c hi\u1ec7n: - Theo d\u00f5i xem topic ch\u1ec9 gi\u1edbi h\u1ea1n cho consumer n\u00e0o nh\u1eadn ,hay consumer \u0111\u00e3 nh\u1eadn \u0111\u01b0\u1ee3c message ch\u01b0a (no check ack form consumer). - Kh\u00f4ng c\u00f3 thao t\u00e1c delete, messeages s\u1ebd \u0111\u01b0\u1ee3c gi\u1eef trong kho\u1ea3ng th\u1eddi gian x\u00e1c \u0111\u1ecbnh v\u00e0 t\u1ef1 \u0111\u1ed9ng x\u00f3a. - Kh\u00f4ng random access v\u00e0o t\u1eebng messeage. Consumers ch\u1ec9 ra s\u1ebd nh\u1eadn messeage t\u1eeb offset bao nhi\u00eau c\u1ee7a topic th\u00ec s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c c\u00e1c message, b\u1eaft \u0111\u1ea7u t\u1eeb offset \u0111\u00f3. Nh\u01b0 v\u1eady, tr\u00e1ch nhi\u1ec7m c\u1ee7a consumer trong x\u1eed l\u00fd d\u1eef li\u1ec7u t\u1eeb kafka l\u00e0 r\u1ea5t l\u1edbn. Kafka kh\u00f4ng c\u00f3 tr\u00e1ch nhi\u1ec7m push() messeage cho consumer, m\u00e0 consumer s\u1ebd poll() messeage c\u1ea7n v\u1ec1, t\u00f9y theo n\u0103ng l\u1ef1c x\u1eed l\u00fd c\u1ee7a n\u00f3. M\u1ed9t s\u1ed1 th\u1ea3o lu\u1eadn v\u1ec1 \u0111i\u1ec1u n\u00e0y https://www.quora.com/How-do-I-verify-if-Kafka-Consumer-consumed-messages","title":"Publish-Subscribe Messaging System"},{"location":"issue/need_review/Kafka/Intro/#toc-o-nhanh","text":"V\u1edbi m\u1ed9t m\u00e1y \u0111\u01a1n c\u00e0i \u0111\u1eb7t Kafka c\u00f3 th\u1ec3 x\u1eed l\u00fd s\u1ed1 l\u01b0\u1ee3ng d\u1eef li\u1ec7u t\u1eeb vi\u1ec7c \u0111\u1ecdc v\u00e0 ghi l\u00ean t\u1edbi h\u00e0ng tr\u0103m megabyte trong m\u1ed9t gi\u00e2y t\u1eeb h\u00e0ng ng\u00e0n m\u00e1y kh\u00e1ch. vd benchmark cho kafka tr\u00ean c\u00e1c h\u1ec7 th\u1ed1ng cloud: theo https://hackernoon.com/benchmarking-kafka-performance-part-1-write-throughput-7c7a76ab7db1","title":"T\u1ed1c \u0111\u1ed9 nhanh"},{"location":"issue/need_review/Kafka/Intro/#kha-nang-mo-rong","text":"Kafka \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf cho ph\u00e9p d\u1ec5 d\u00e0ng \u0111\u01b0\u1ee3c m\u1edf r\u1ed9ng v\u00e0 trong su\u1ed1t v\u1edbi ng\u01b0\u1eddi d\u00f9ng (kh\u00f4ng downtime khi th\u00eam m\u1ed9t n\u00fat m\u00e1y ch\u1ee7 m\u1edbi v\u00e0o c\u1ee5m). Lu\u1ed3ng d\u1eef li\u1ec7u s\u1ebd \u0111\u01b0\u1ee3c ph\u00e2n chia v\u00e0 \u0111\u01b0\u1ee3c v\u1eadn chuy\u1ec3n t\u1edbi c\u00e1c n\u00fat trong c\u1ee5m, do \u0111\u00f3 cho ph\u00e9p trung chuy\u1ec3n c\u00e1c d\u1eef li\u1ec7u m\u00e0 c\u00f3 kh\u1ed1i l\u01b0\u1ee3ng l\u1edbn h\u01a1n nhi\u1ec1u so v\u1edbi s\u1ee9c ch\u1ee9a c\u1ee7a m\u1ed9t m\u00e1y \u0111\u01a1n.","title":"Kh\u1ea3 n\u0103ng m\u1edf r\u1ed9ng:"},{"location":"issue/need_review/Kafka/Intro/#o-tin-cay","text":"D\u1eef li\u1ec7u v\u00e0o h\u00e0ng \u0111\u1ee3i s\u1ebd \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef tr\u00ean \u1ed5 \u0111\u0129a v\u00e0 \u0111\u01b0\u1ee3c sao ch\u00e9p t\u1edbi c\u00e1c n\u00fat kh\u00e1c trong c\u1ee5m \u0111\u1ec3 ng\u0103n ng\u1eeba vi\u1ec7c m\u1ea5t d\u1eef li\u1ec7u, \u0111\u1ea3m b\u1ea3o t\u00ednh ch\u1ecbu l\u1ed7i cao.","title":"\u0110\u1ed9 tin c\u1eady:"},{"location":"issue/need_review/Kafka/Intro/#reference","text":"https://techbeacon.com/what-apache-kafka-why-it-so-popular-should-you-use-it https://www.confluent.io/blog/apache-kafka-vs-enterprise-service-bus-esb-friends-enemies-or-frenemies/?fbclid=IwAR3A_Lcl7sgRTinzJUUwyQwNBm8V_3vCokFXuZcomXD1NlPNDmpb34f41po https://www.tutorialspoint.com/apache_kafka/index.htm https://dzone.com/articles/understanding-kafka-consumer-groups-and-consumer-l https://kafka.apache.org/","title":"Reference"},{"location":"issue/need_review/Kafka/Operator/","text":"Operator with kafka Topics List existing topics bin/kafka-topics.sh --zookeeper localhost:2181 --list Describe a topic bin/kafka-topics.sh --zookeeper localhost:2181 --describe --topic mytopic Purge a topic bin/kafka-topics.sh --zookeeper localhost:2181 --alter --topic mytopic --config retention.ms=1000 wait a minute bin/kafka-topics.sh --zookeeper localhost:2181 --alter --topic mytopic --delete-config retention.ms Delete a topic bin/kafka-topics.sh --zookeeper localhost:2181 --delete --topic mytopic Get number of messages in a topic bin/kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list localhost:9092 --topic mytopic --time -1 --offsets 1 | awk -F \":\" '{sum += $3} END {print sum}' Get the earliest offset still in a topic bin/kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list localhost:9092 --topic mytopic --time -2 Get the latest offset still in a topic bin/kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list localhost:9092 --topic mytopic --time -1 Consume messages with the console consumer bin/kafka-console-consumer.sh --new-consumer --bootstrap-server localhost:9092 --topic mytopic --from-beginning Get the consumer offsets for a topic bin/kafka-consumer-offset-checker.sh --zookeeper=localhost:2181 --topic=mytopic --group=my_consumer_group Read from __consumer_offsets Add the following property to config/consumer.properties : exclude.internal.topics=false bin/kafka-console-consumer.sh --consumer.config config/consumer.properties --from-beginning --topic __consumer_offsets --zookeeper localhost:2181 --formatter \"kafka.coordinator.GroupMetadataManager\\$OffsetsMessageFormatter\" Kafka Consumer Groups List the consumer groups known to Kafka bin/kafka-consumer-groups.sh --zookeeper localhost:2181 --list (old api) bin/kafka-consumer-groups.sh --new-consumer --bootstrap-server localhost:9092 --list (new api) View the details of a consumer group bin/kafka-consumer-groups.sh --zookeeper localhost:2181 --describe --group group name kafkacat Getting the last five message of a topic kafkacat -C -b localhost:9092 -t mytopic -p 0 -o -5 -e Zookeeper Starting the Zookeeper Shell bin/zookeeper-shell.sh localhost:2181 basic command cli zookeeper : http://www.corejavaguru.com/bigdata/zookeeper/cli Reassign partition to broker S\u1eed d\u1ee5ng kafka-reassign-partitions.sh tool v\u1edbi 3 t\u00f9y ch\u1ecdn: generate: \u0110\u01b0a v\u00e0o list topic c\u1ea7n chuy\u1ec3n paritition, tr\u1ea3 v\u1ec1 danh s\u00e1ch g\u1ee3i \u00fd (plan) n\u00ean \u0111\u01b0a partition n\u00e0o v\u00e0o broker n\u00e0o execute: Th\u1ef1c hi\u1ec7n reassignment d\u01b0a tr\u00ean plan verify: \u0110\u01b0a v\u00e0o plan, check xem qu\u00e1 tr\u00ecnh reassign \u0111\u00e3 th\u00e0nh c\u00f4ng hay th\u1ea5t b\u1ea1i th\u1ebf n\u00e0o B\u01b0\u1edbc 1: T\u1ea1o danh s\u00e1ch topic: cat topics-to-move.json { topics : [{ topic : foo1 }, { topic : foo2 }], version :1 } B\u01b0\u1edbc 2: t\u1ea1o plan: bin/kafka-reassign-partitions.sh --zookeeper localhost:2181 --topics-to-move-json-file topics-to-move.json --broker-list 5,6 --generate Current partition replica assignment { version :1, partitions :[{ topic : foo1 , partition :2, replicas :[1,2]}, { topic : foo1 , partition :0, replicas :[3,4]}, { topic : foo2 , partition :2, replicas :[1,2]}, { topic : foo2 , partition :0, replicas :[3,4]}, { topic : foo1 , partition :1, replicas :[2,3]}, { topic : foo2 , partition :1, replicas :[2,3]}] } Proposed partition reassignment configuration { version :1, partitions :[{ topic : foo1 , partition :2, replicas :[5,6]}, { topic : foo1 , partition :0, replicas :[5,6]}, { topic : foo2 , partition :2, replicas :[5,6]}, { topic : foo2 , partition :0, replicas :[5,6]}, { topic : foo1 , partition :1, replicas :[5,6]}, { topic : foo2 , partition :1, replicas :[5,6]}] } L\u01b0u th\u00f4ng tin t\u1eeb sau d\u00f2ng Proposed... v\u00e0o file expand-cluster-reassignment.json B\u01b0\u1edbc 3: Th\u1ef1c hi\u1ec7n: bin/kafka-reassign-partitions.sh --zookeeper localhost:2181 --reassignment-json-file expand-cluster-reassignment.json --execute B\u01b0\u1edbc 4: ki\u1ec3m tra: bin/kafka-reassign-partitions.sh --zookeeper localhost:2181 --reassignment-json-file expand-cluster-reassignment.json --verify Status of partition reassignment: Reassignment of partition [foo1,0] completed successfully Reassignment of partition [foo1,1] is in progress Reassignment of partition [foo1,2] is in progress Reassignment of partition [foo2,0] completed successfully Reassignment of partition [foo2,1] completed successfully Reassignment of partition [foo2,2] completed successfully T\u01b0\u01a1ng t\u1ef1, thao t\u00e1c t\u0103ng s\u1ed1 replicate c\u1ee7a m\u1ed9t topic c\u0169ng l\u00e0m nh\u01b0 c\u00e1c b\u01b0\u1edbc tr\u00ean. cat increase-replication-factor.json { version :1, partitions :[{ topic : foo , partition :0, replicas :[5,6,7]}]} bin/kafka-reassign-partitions.sh --zookeeper localhost:2181 --reassignment-json-file increase-replication-factor.json --execute Current partition replica assignment { version :1, partitions :[{ topic : foo , partition :0, replicas :[5]}]} Save this to use as the --reassignment-json-file option during rollback Successfully started reassignment of partitions { version :1, partitions :[{ topic : foo , partition :0, replicas :[5,6,7]}]} Ref https://www.ibm.com/support/knowledgecenter/en/SSCVHB_1.2.0/admin/tnpi_reassign_partitions.html https://blog.imaginea.com/how-to-rebalance-topics-in-kafka-cluster/ https://cwiki.apache.org/confluence/display/KAFKA/Replication+tools https://kafka.apache.org/documentation/#basic_ops https://gist.github.com/sonhmai/5b2b4455162c808c091b661aeb675625","title":"Operator"},{"location":"issue/need_review/Kafka/Operator/#operator-with-kafka-topics","text":"","title":"Operator with kafka Topics"},{"location":"issue/need_review/Kafka/Operator/#list-existing-topics","text":"bin/kafka-topics.sh --zookeeper localhost:2181 --list","title":"List existing topics"},{"location":"issue/need_review/Kafka/Operator/#describe-a-topic","text":"bin/kafka-topics.sh --zookeeper localhost:2181 --describe --topic mytopic","title":"Describe a topic"},{"location":"issue/need_review/Kafka/Operator/#purge-a-topic","text":"bin/kafka-topics.sh --zookeeper localhost:2181 --alter --topic mytopic --config retention.ms=1000 wait a minute bin/kafka-topics.sh --zookeeper localhost:2181 --alter --topic mytopic --delete-config retention.ms","title":"Purge a topic"},{"location":"issue/need_review/Kafka/Operator/#delete-a-topic","text":"bin/kafka-topics.sh --zookeeper localhost:2181 --delete --topic mytopic","title":"Delete a topic"},{"location":"issue/need_review/Kafka/Operator/#get-number-of-messages-in-a-topic","text":"bin/kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list localhost:9092 --topic mytopic --time -1 --offsets 1 | awk -F \":\" '{sum += $3} END {print sum}'","title":"Get number of messages in a topic"},{"location":"issue/need_review/Kafka/Operator/#get-the-earliest-offset-still-in-a-topic","text":"bin/kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list localhost:9092 --topic mytopic --time -2","title":"Get the earliest offset still in a topic"},{"location":"issue/need_review/Kafka/Operator/#get-the-latest-offset-still-in-a-topic","text":"bin/kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list localhost:9092 --topic mytopic --time -1","title":"Get the latest offset still in a topic"},{"location":"issue/need_review/Kafka/Operator/#consume-messages-with-the-console-consumer","text":"bin/kafka-console-consumer.sh --new-consumer --bootstrap-server localhost:9092 --topic mytopic --from-beginning","title":"Consume messages with the console consumer"},{"location":"issue/need_review/Kafka/Operator/#get-the-consumer-offsets-for-a-topic","text":"bin/kafka-consumer-offset-checker.sh --zookeeper=localhost:2181 --topic=mytopic --group=my_consumer_group","title":"Get the consumer offsets for a topic"},{"location":"issue/need_review/Kafka/Operator/#read-from-__consumer_offsets","text":"Add the following property to config/consumer.properties : exclude.internal.topics=false bin/kafka-console-consumer.sh --consumer.config config/consumer.properties --from-beginning --topic __consumer_offsets --zookeeper localhost:2181 --formatter \"kafka.coordinator.GroupMetadataManager\\$OffsetsMessageFormatter\"","title":"Read from __consumer_offsets"},{"location":"issue/need_review/Kafka/Operator/#kafka-consumer-groups","text":"","title":"Kafka Consumer Groups"},{"location":"issue/need_review/Kafka/Operator/#list-the-consumer-groups-known-to-kafka","text":"bin/kafka-consumer-groups.sh --zookeeper localhost:2181 --list (old api) bin/kafka-consumer-groups.sh --new-consumer --bootstrap-server localhost:9092 --list (new api)","title":"List the consumer groups known to Kafka"},{"location":"issue/need_review/Kafka/Operator/#view-the-details-of-a-consumer-group","text":"bin/kafka-consumer-groups.sh --zookeeper localhost:2181 --describe --group group name","title":"View the details of a consumer group"},{"location":"issue/need_review/Kafka/Operator/#kafkacat","text":"","title":"kafkacat"},{"location":"issue/need_review/Kafka/Operator/#getting-the-last-five-message-of-a-topic","text":"kafkacat -C -b localhost:9092 -t mytopic -p 0 -o -5 -e","title":"Getting the last five message of a topic"},{"location":"issue/need_review/Kafka/Operator/#zookeeper","text":"","title":"Zookeeper"},{"location":"issue/need_review/Kafka/Operator/#starting-the-zookeeper-shell","text":"bin/zookeeper-shell.sh localhost:2181 basic command cli zookeeper : http://www.corejavaguru.com/bigdata/zookeeper/cli","title":"Starting the Zookeeper Shell"},{"location":"issue/need_review/Kafka/Operator/#reassign-partition-to-broker","text":"S\u1eed d\u1ee5ng kafka-reassign-partitions.sh tool v\u1edbi 3 t\u00f9y ch\u1ecdn: generate: \u0110\u01b0a v\u00e0o list topic c\u1ea7n chuy\u1ec3n paritition, tr\u1ea3 v\u1ec1 danh s\u00e1ch g\u1ee3i \u00fd (plan) n\u00ean \u0111\u01b0a partition n\u00e0o v\u00e0o broker n\u00e0o execute: Th\u1ef1c hi\u1ec7n reassignment d\u01b0a tr\u00ean plan verify: \u0110\u01b0a v\u00e0o plan, check xem qu\u00e1 tr\u00ecnh reassign \u0111\u00e3 th\u00e0nh c\u00f4ng hay th\u1ea5t b\u1ea1i th\u1ebf n\u00e0o B\u01b0\u1edbc 1: T\u1ea1o danh s\u00e1ch topic: cat topics-to-move.json { topics : [{ topic : foo1 }, { topic : foo2 }], version :1 } B\u01b0\u1edbc 2: t\u1ea1o plan: bin/kafka-reassign-partitions.sh --zookeeper localhost:2181 --topics-to-move-json-file topics-to-move.json --broker-list 5,6 --generate Current partition replica assignment { version :1, partitions :[{ topic : foo1 , partition :2, replicas :[1,2]}, { topic : foo1 , partition :0, replicas :[3,4]}, { topic : foo2 , partition :2, replicas :[1,2]}, { topic : foo2 , partition :0, replicas :[3,4]}, { topic : foo1 , partition :1, replicas :[2,3]}, { topic : foo2 , partition :1, replicas :[2,3]}] } Proposed partition reassignment configuration { version :1, partitions :[{ topic : foo1 , partition :2, replicas :[5,6]}, { topic : foo1 , partition :0, replicas :[5,6]}, { topic : foo2 , partition :2, replicas :[5,6]}, { topic : foo2 , partition :0, replicas :[5,6]}, { topic : foo1 , partition :1, replicas :[5,6]}, { topic : foo2 , partition :1, replicas :[5,6]}] } L\u01b0u th\u00f4ng tin t\u1eeb sau d\u00f2ng Proposed... v\u00e0o file expand-cluster-reassignment.json B\u01b0\u1edbc 3: Th\u1ef1c hi\u1ec7n: bin/kafka-reassign-partitions.sh --zookeeper localhost:2181 --reassignment-json-file expand-cluster-reassignment.json --execute B\u01b0\u1edbc 4: ki\u1ec3m tra: bin/kafka-reassign-partitions.sh --zookeeper localhost:2181 --reassignment-json-file expand-cluster-reassignment.json --verify Status of partition reassignment: Reassignment of partition [foo1,0] completed successfully Reassignment of partition [foo1,1] is in progress Reassignment of partition [foo1,2] is in progress Reassignment of partition [foo2,0] completed successfully Reassignment of partition [foo2,1] completed successfully Reassignment of partition [foo2,2] completed successfully T\u01b0\u01a1ng t\u1ef1, thao t\u00e1c t\u0103ng s\u1ed1 replicate c\u1ee7a m\u1ed9t topic c\u0169ng l\u00e0m nh\u01b0 c\u00e1c b\u01b0\u1edbc tr\u00ean. cat increase-replication-factor.json { version :1, partitions :[{ topic : foo , partition :0, replicas :[5,6,7]}]} bin/kafka-reassign-partitions.sh --zookeeper localhost:2181 --reassignment-json-file increase-replication-factor.json --execute Current partition replica assignment { version :1, partitions :[{ topic : foo , partition :0, replicas :[5]}]} Save this to use as the --reassignment-json-file option during rollback Successfully started reassignment of partitions { version :1, partitions :[{ topic : foo , partition :0, replicas :[5,6,7]}]}","title":"Reassign partition to broker"},{"location":"issue/need_review/Kafka/Operator/#ref","text":"https://www.ibm.com/support/knowledgecenter/en/SSCVHB_1.2.0/admin/tnpi_reassign_partitions.html https://blog.imaginea.com/how-to-rebalance-topics-in-kafka-cluster/ https://cwiki.apache.org/confluence/display/KAFKA/Replication+tools https://kafka.apache.org/documentation/#basic_ops https://gist.github.com/sonhmai/5b2b4455162c808c091b661aeb675625","title":"Ref"},{"location":"issue/need_review/Kafka/QuickStart/","text":"CONTENTS: 1. INSTALL 2. RUN EXAMPLE 3. INSTALL DRASH BOARD H\u01b0\u1edbng d\u1eabn c\u00e0i \u0111\u1eb7t kafka: Single-Node cluster C\u00e0i \u0111\u1eb7t java: sudo apt-get install default-jre sudo apt-get install default-jdk T\u1ea1o user kafka sudo useradd kafka -m sudo passwd kafka sudo adduser kafka sudo su -l kafka dowload, gi\u1ea3i n\u00e9n kafka: curl http://www-eu.apache.org/dist/kafka/1.1.0/kafka_2.12-1.1.0.tgz -o ~/kafka.tgz mkdir ~/kafka cd ~/kafka tar -xvzf ~/kafka.tgz --strip 1 t\u1ea1o c\u00e1c service file : zookeeper service v\u00e0 kafka service: - t\u1ea1o file /etc/systemd/system/zookeeper.service v\u1edbi n\u1ed9i dung [Unit] Requires=network.target remote-fs.target After=network.target remote-fs.target [Service] Type=simple User=kafka ExecStart=/home/kafka/kafka/bin/zookeeper-server-start.sh /home/kafka/kafka/config/zookeeper.properties ExecStop=/home/kafka/kafka/bin/zookeeper-server-stop.sh Restart=on-abnormal [Install] WantedBy=multi-user.target - t\u1ea1o file /etc/systemd/system/kafka.service [Unit] Requires=zookeeper.service After=zookeeper.service [Service] Type=simple User=kafka ExecStart=/bin/sh -c '/home/kafka/kafka/bin/kafka-server-start.sh /home/kafka/kafka/config/server.properties /home/kafka/kafka/kafka.log 2 1' ExecStop=/home/kafka/kafka/bin/kafka-server-stop.sh Restart=on-abnormal [Install] WantedBy=multi-user.target Start kafka, zookeeper. sudo systemctl start kafka ta \u0111\u00e3 c\u00e0i \u0111\u01b0\u1ee3c c\u1ee5m kafka v\u1edbi 1 broker, d\u00f9ng c\u1ed5ng 9092. zookeeper service m\u1edf c\u1ed5ng 2181 Multi-Node cluster Th\u1ef1c hi\u1ec7n nguy\u00ean c\u00e1c b\u01b0\u1edbc nh\u01b0 single node, ch\u1ec9 kh\u00e1c tr\u01b0\u1edbc khi kh\u1edfi \u0111\u1ed9ng kafka. ta c\u1ea7n s\u1eeda c\u00e1c c\u1ea5u h\u00ecnh: File ~/kafka/config/server.properties: - s\u1eeda d\u00f2ng broker.id=0 Sao cho m\u1ed7i broker trong cluster s\u1eed d\u1ee5ng 1 broker id kh\u00e1c nhau - s\u1eeda d\u00f2ng zookeeper.connect=localhost:2181 Sao cho t\u1ea5t c\u1ea3 c\u00e1c node trong c\u1ee5m tr\u1ecf th\u1ed1ng nh\u1ea5t v\u1ec1 1 zookeeper . vd nh\u01b0 s\u1eeda t\u1ea1i t\u1ea5t c\u1ea3 c\u00e1c node th\u00e0nh zookeeper.connect=192.168.2.191:2181 Ch\u1ea1y example : T\u1ea1o m\u1ed9t topic ~/kafka/bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic TutorialTopic Ghi d\u1eef li\u1ec7u v\u00e0o topic nh\u1edd kafka producer console echo Hello, World | ~/kafka/bin/kafka-console-producer.sh --broker-list localhost:9092 --topic TutorialTopic /dev/null List topic: ~/kafka/bin/kafka-topics.sh --list --zookeeper localhost:2181 \u0110\u1ecdc d\u1eef li\u1ec7u t\u1eeb topic tr\u00ean nh\u1edd kafka consummer console ~/kafka/bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic TutorialTopic --from-beginning C\u00e0i \u0111\u1eb7t DrashBoarsh Docker: docker run -d --net=host --restart unless-stopped --name kafka_manager -e ZK_HOSTS= localhost:2181 -e APPLICATION_SECRET=letmein sheepkiller/kafka-manager M\u1ed9t web-controll s\u1ebd \u0111\u01b0\u1ee3c m\u1edf ra t\u1ea1i c\u1ed5ng 9000","title":"QuickStart"},{"location":"issue/need_review/Kafka/QuickStart/#1-install","text":"","title":"1. INSTALL"},{"location":"issue/need_review/Kafka/QuickStart/#2-run-example","text":"","title":"2. RUN EXAMPLE"},{"location":"issue/need_review/Kafka/QuickStart/#3-install-drash-board","text":"","title":"3. INSTALL DRASH BOARD"},{"location":"issue/need_review/Kafka/QuickStart/#single-node-cluster","text":"C\u00e0i \u0111\u1eb7t java: sudo apt-get install default-jre sudo apt-get install default-jdk T\u1ea1o user kafka sudo useradd kafka -m sudo passwd kafka sudo adduser kafka sudo su -l kafka dowload, gi\u1ea3i n\u00e9n kafka: curl http://www-eu.apache.org/dist/kafka/1.1.0/kafka_2.12-1.1.0.tgz -o ~/kafka.tgz mkdir ~/kafka cd ~/kafka tar -xvzf ~/kafka.tgz --strip 1 t\u1ea1o c\u00e1c service file : zookeeper service v\u00e0 kafka service: - t\u1ea1o file /etc/systemd/system/zookeeper.service v\u1edbi n\u1ed9i dung [Unit] Requires=network.target remote-fs.target After=network.target remote-fs.target [Service] Type=simple User=kafka ExecStart=/home/kafka/kafka/bin/zookeeper-server-start.sh /home/kafka/kafka/config/zookeeper.properties ExecStop=/home/kafka/kafka/bin/zookeeper-server-stop.sh Restart=on-abnormal [Install] WantedBy=multi-user.target - t\u1ea1o file /etc/systemd/system/kafka.service [Unit] Requires=zookeeper.service After=zookeeper.service [Service] Type=simple User=kafka ExecStart=/bin/sh -c '/home/kafka/kafka/bin/kafka-server-start.sh /home/kafka/kafka/config/server.properties /home/kafka/kafka/kafka.log 2 1' ExecStop=/home/kafka/kafka/bin/kafka-server-stop.sh Restart=on-abnormal [Install] WantedBy=multi-user.target Start kafka, zookeeper. sudo systemctl start kafka ta \u0111\u00e3 c\u00e0i \u0111\u01b0\u1ee3c c\u1ee5m kafka v\u1edbi 1 broker, d\u00f9ng c\u1ed5ng 9092. zookeeper service m\u1edf c\u1ed5ng 2181","title":"Single-Node cluster"},{"location":"issue/need_review/Kafka/QuickStart/#multi-node-cluster","text":"Th\u1ef1c hi\u1ec7n nguy\u00ean c\u00e1c b\u01b0\u1edbc nh\u01b0 single node, ch\u1ec9 kh\u00e1c tr\u01b0\u1edbc khi kh\u1edfi \u0111\u1ed9ng kafka. ta c\u1ea7n s\u1eeda c\u00e1c c\u1ea5u h\u00ecnh: File ~/kafka/config/server.properties: - s\u1eeda d\u00f2ng broker.id=0 Sao cho m\u1ed7i broker trong cluster s\u1eed d\u1ee5ng 1 broker id kh\u00e1c nhau - s\u1eeda d\u00f2ng zookeeper.connect=localhost:2181 Sao cho t\u1ea5t c\u1ea3 c\u00e1c node trong c\u1ee5m tr\u1ecf th\u1ed1ng nh\u1ea5t v\u1ec1 1 zookeeper . vd nh\u01b0 s\u1eeda t\u1ea1i t\u1ea5t c\u1ea3 c\u00e1c node th\u00e0nh zookeeper.connect=192.168.2.191:2181","title":"Multi-Node cluster"},{"location":"issue/need_review/Kafka/zookeeper_kafka_integration/HA_configuration/","text":"N\u1ed9i dung B\u00e0i vi\u1ebft l\u00e0 ch\u1ec9 ra c\u00e1ch c\u1ea5u h\u00ecnh m\u1ed9t c\u1ee5m zookeeper 3 node c\u00f9ng kafka g\u1ed3m 3 broker c\u00f3 th\u1ec3 failover : 1 kafka, 1 zookeeper hay 1 host ch\u1ebft v\u1eabn c\u00f3 th\u1ec3 ho\u1ea1t \u0111\u1ed9ng b\u00ecnh th\u01b0\u1eddng; M\u00f4 h\u00ecnh C\u00e0i \u0111\u1eb7t Chu\u1ea9n b\u1ecb T\u1ea1o user , dowload kafka-zookeeper: T\u1ea1o user kafka sudo useradd kafka -m sudo passwd kafka sudo adduser kafka sudo su -l kafka Dowload kafka, kafka c\u0169ng \u0111\u00e3 c\u00f3 s\u1eb5n b\u1ea3n zookeeper k\u00e8m theo. curl http://www-eu.apache.org/dist/kafka/1.1.0/kafka_2.12-1.1.0.tgz -o ~/kafka.tgz mkdir ~/kafka cd ~/kafka tar -xvzf ~/kafka.tgz --strip 1 C\u00e1c file ch\u1ea1y, c\u1ea5u h\u00ecnh hi\u1ec7n \u0111\u00e3 gi\u1ea3i n\u00e9n ra th\u01b0 m\u1ee5c ~/kafka C\u1ea5u h\u00ecnh c\u1ee5m zookeeper L\u00e0m tr\u00ean t\u1ea5t c\u1ea3 c\u00e1c host: B\u01b0\u1edbc 1: S\u1eeda file kafka/config/zookeeper.properties th\u00e0nh n\u1ed9i dung: initLimit=5 syncLimit=2 dataDir=/home/kafka/Data/zookeeper clientPort=2181 server.1=192.168.2.194:2888:3888 server.2=192.168.2.153:2888:3888 server.3=192.168.2.193:2888:3888 Trong \u0111\u00f3 port 2181 cho client connections; 2888 cho follower connections (n\u1ebfu n\u00f3 l\u00e0 zookeeper leader); and 3888 cho c\u00e1c server kh\u00e1c k\u1ebft n\u1ed1i khi qu\u00e1 tr\u00ecnh b\u1ea7u leader \u0111ang di\u1ec5n ra. server.1=192.168.2.194 t\u1ee9c ta \u0111\u00e3 khai b\u00e1o zookeeper id cho host 192.168.2.194 l\u00e0 id 1 Tr\u1ecf dataDir=/home/kafka/Data/zookeeper th\u00ec ta c\u0169ng c\u1ea7n t\u1ea1o m\u1ed9t th\u01b0 m\u1ee5c tr\u1ed1ng /home/kafka/Data/zookeeper B\u01b0\u1edbc 2: v\u00e0o th\u01b0 m\u1ee5c /home/kafka/Data/zookeeper , t\u1ea1o file myid, n\u1ed9i dung l\u00e0 zookeeper id \u1edf tr\u00ean: v\u00ed d\u1ee5 v\u1edbi host zookeeper 1 : 192.168.2.194 echo 1 /home/kafka/Data/zookeeper/myid B\u01b0\u1edbc 3: ch\u1ea1y zookeeper tr\u00ean m\u1ed7i host: /home/kafka/kafka/bin/zookeeper-server-start.sh /home/kafka/kafka/config/zookeeper.properties C\u1ea5u h\u00ecnh c\u1ee5m kafka L\u00e0m tr\u00ean t\u1ea5t c\u1ea3 c\u00e1c host: B\u01b0\u1edbc 1: S\u1eeda file ~/kafka/config/server.properties Thay broker.id=x v\u1edbi x l\u00e0 id kafka c\u1ee7a t\u1eebng host, vd host 192.168.2.194 broker.id=1 Li\u1ec7t k\u00ea host trong c\u1ee5m zookeeper t\u1ea1i zookeeper.connect= host :port . v\u00ed d\u1ee5 v\u1edbi c\u1ee5m tr\u00ean zookeeper.connect=192.168.2.194:2181,192.168.2.193:2181,192.168.2.53:2181 Th\u00eam d\u00f2ng: delete.topic.enable = true cho ph\u00e9p kafka broker c\u00f3 th\u1ec3 x\u00f3a topic. B\u01b0\u1edbc 2: ch\u1ea1y kafka: /bin/sh -c '/home/kafka/kafka/bin/kafka-server-start.sh /home/kafka/kafka/config/server.properties /home/kafka/kafka/kafka.log 2 1' T\u1ea1o replicate cho topic __consumer_offsets __consumer_offsets l\u00e0 topic \u0111\u01b0\u1ee3c t\u1ea1o m\u1eb7c \u0111\u1ecbnh, r\u1ea5t quan tr\u1ecdng v\u00ec n\u00f3 gi\u1eef v\u1ecb tr\u00ed offset \u0111ang \u0111\u1ecdc t\u1edbi c\u1ee7a consummer. Tuy nhi\u00ean khi m\u1edbi t\u1ea1o n\u00f3 s\u1ebd l\u1ea5y replicate 1 c\u00f9ng patition 50. Ta c\u1ea7n t\u0103ng s\u1ed1 replicate c\u1ee7a n\u00f3 l\u00ean. B\u01b0\u1edbc 1: T\u1ea1o file inc-replication-factor.json v\u1edbi n\u1ed9i dung: { version :1, partitions :[ { topic : __consumer_offsets , partition :0, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :1, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :2, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :3, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :4, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :5, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :6, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :7, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :8, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :9, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :10, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :11, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :12, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :13, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :14, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :15, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :16, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :17, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :18, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :19, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :20, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :21, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :22, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :23, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :24, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :25, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :26, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :27, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :28, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :29, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :30, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :31, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :32, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :33, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :34, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :35, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :36, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :37, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :38, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :39, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :40, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :41, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :42, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :43, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :44, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :45, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :46, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :47, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :48, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :49, replicas :[1, 2, 3]} ] } B\u01b0\u1edbc 2: Th\u1ef1c hi\u1ec7n partition reassignment: ~/kafka/bin/kafka-reassign-partitions.sh --zookeeper 192.168.2.193:2181 \\ --reassignment-json-file /home/kafka/inc-replication-factor.json \\ --execute Ki\u1ec3m tra k\u1ebft qu\u1ea3: ~/kafka/bin/kafka-topics.sh --zookeeper 192.168.2.193 --describe --topic __consumer_offsets Nh\u01b0 v\u1eady, hi\u1ec7n gi\u1edd n\u1ebfu t\u1ea1o topic , ta n\u00ean \u0111\u1ec3 replicate 3 gi\u00fap failover: ~/kafka/bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 3 --partitions 1 --topic rep3","title":"HA configuration"},{"location":"issue/need_review/Kafka/zookeeper_kafka_integration/HA_configuration/#noi-dung","text":"B\u00e0i vi\u1ebft l\u00e0 ch\u1ec9 ra c\u00e1ch c\u1ea5u h\u00ecnh m\u1ed9t c\u1ee5m zookeeper 3 node c\u00f9ng kafka g\u1ed3m 3 broker c\u00f3 th\u1ec3 failover : 1 kafka, 1 zookeeper hay 1 host ch\u1ebft v\u1eabn c\u00f3 th\u1ec3 ho\u1ea1t \u0111\u1ed9ng b\u00ecnh th\u01b0\u1eddng;","title":"N\u1ed9i dung"},{"location":"issue/need_review/Kafka/zookeeper_kafka_integration/HA_configuration/#mo-hinh","text":"","title":"M\u00f4 h\u00ecnh"},{"location":"issue/need_review/Kafka/zookeeper_kafka_integration/HA_configuration/#cai-at","text":"","title":"C\u00e0i \u0111\u1eb7t"},{"location":"issue/need_review/Kafka/zookeeper_kafka_integration/HA_configuration/#chuan-bi","text":"T\u1ea1o user , dowload kafka-zookeeper: T\u1ea1o user kafka sudo useradd kafka -m sudo passwd kafka sudo adduser kafka sudo su -l kafka Dowload kafka, kafka c\u0169ng \u0111\u00e3 c\u00f3 s\u1eb5n b\u1ea3n zookeeper k\u00e8m theo. curl http://www-eu.apache.org/dist/kafka/1.1.0/kafka_2.12-1.1.0.tgz -o ~/kafka.tgz mkdir ~/kafka cd ~/kafka tar -xvzf ~/kafka.tgz --strip 1 C\u00e1c file ch\u1ea1y, c\u1ea5u h\u00ecnh hi\u1ec7n \u0111\u00e3 gi\u1ea3i n\u00e9n ra th\u01b0 m\u1ee5c ~/kafka","title":"Chu\u1ea9n b\u1ecb"},{"location":"issue/need_review/Kafka/zookeeper_kafka_integration/HA_configuration/#cau-hinh-cum-zookeeper","text":"L\u00e0m tr\u00ean t\u1ea5t c\u1ea3 c\u00e1c host: B\u01b0\u1edbc 1: S\u1eeda file kafka/config/zookeeper.properties th\u00e0nh n\u1ed9i dung: initLimit=5 syncLimit=2 dataDir=/home/kafka/Data/zookeeper clientPort=2181 server.1=192.168.2.194:2888:3888 server.2=192.168.2.153:2888:3888 server.3=192.168.2.193:2888:3888 Trong \u0111\u00f3 port 2181 cho client connections; 2888 cho follower connections (n\u1ebfu n\u00f3 l\u00e0 zookeeper leader); and 3888 cho c\u00e1c server kh\u00e1c k\u1ebft n\u1ed1i khi qu\u00e1 tr\u00ecnh b\u1ea7u leader \u0111ang di\u1ec5n ra. server.1=192.168.2.194 t\u1ee9c ta \u0111\u00e3 khai b\u00e1o zookeeper id cho host 192.168.2.194 l\u00e0 id 1 Tr\u1ecf dataDir=/home/kafka/Data/zookeeper th\u00ec ta c\u0169ng c\u1ea7n t\u1ea1o m\u1ed9t th\u01b0 m\u1ee5c tr\u1ed1ng /home/kafka/Data/zookeeper B\u01b0\u1edbc 2: v\u00e0o th\u01b0 m\u1ee5c /home/kafka/Data/zookeeper , t\u1ea1o file myid, n\u1ed9i dung l\u00e0 zookeeper id \u1edf tr\u00ean: v\u00ed d\u1ee5 v\u1edbi host zookeeper 1 : 192.168.2.194 echo 1 /home/kafka/Data/zookeeper/myid B\u01b0\u1edbc 3: ch\u1ea1y zookeeper tr\u00ean m\u1ed7i host: /home/kafka/kafka/bin/zookeeper-server-start.sh /home/kafka/kafka/config/zookeeper.properties","title":"C\u1ea5u h\u00ecnh c\u1ee5m zookeeper"},{"location":"issue/need_review/Kafka/zookeeper_kafka_integration/HA_configuration/#cau-hinh-cum-kafka","text":"L\u00e0m tr\u00ean t\u1ea5t c\u1ea3 c\u00e1c host: B\u01b0\u1edbc 1: S\u1eeda file ~/kafka/config/server.properties Thay broker.id=x v\u1edbi x l\u00e0 id kafka c\u1ee7a t\u1eebng host, vd host 192.168.2.194 broker.id=1 Li\u1ec7t k\u00ea host trong c\u1ee5m zookeeper t\u1ea1i zookeeper.connect= host :port . v\u00ed d\u1ee5 v\u1edbi c\u1ee5m tr\u00ean zookeeper.connect=192.168.2.194:2181,192.168.2.193:2181,192.168.2.53:2181 Th\u00eam d\u00f2ng: delete.topic.enable = true cho ph\u00e9p kafka broker c\u00f3 th\u1ec3 x\u00f3a topic. B\u01b0\u1edbc 2: ch\u1ea1y kafka: /bin/sh -c '/home/kafka/kafka/bin/kafka-server-start.sh /home/kafka/kafka/config/server.properties /home/kafka/kafka/kafka.log 2 1' T\u1ea1o replicate cho topic __consumer_offsets __consumer_offsets l\u00e0 topic \u0111\u01b0\u1ee3c t\u1ea1o m\u1eb7c \u0111\u1ecbnh, r\u1ea5t quan tr\u1ecdng v\u00ec n\u00f3 gi\u1eef v\u1ecb tr\u00ed offset \u0111ang \u0111\u1ecdc t\u1edbi c\u1ee7a consummer. Tuy nhi\u00ean khi m\u1edbi t\u1ea1o n\u00f3 s\u1ebd l\u1ea5y replicate 1 c\u00f9ng patition 50. Ta c\u1ea7n t\u0103ng s\u1ed1 replicate c\u1ee7a n\u00f3 l\u00ean. B\u01b0\u1edbc 1: T\u1ea1o file inc-replication-factor.json v\u1edbi n\u1ed9i dung: { version :1, partitions :[ { topic : __consumer_offsets , partition :0, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :1, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :2, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :3, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :4, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :5, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :6, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :7, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :8, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :9, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :10, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :11, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :12, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :13, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :14, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :15, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :16, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :17, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :18, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :19, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :20, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :21, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :22, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :23, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :24, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :25, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :26, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :27, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :28, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :29, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :30, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :31, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :32, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :33, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :34, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :35, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :36, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :37, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :38, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :39, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :40, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :41, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :42, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :43, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :44, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :45, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :46, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :47, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :48, replicas :[1, 2, 3]}, { topic : __consumer_offsets , partition :49, replicas :[1, 2, 3]} ] } B\u01b0\u1edbc 2: Th\u1ef1c hi\u1ec7n partition reassignment: ~/kafka/bin/kafka-reassign-partitions.sh --zookeeper 192.168.2.193:2181 \\ --reassignment-json-file /home/kafka/inc-replication-factor.json \\ --execute","title":"C\u1ea5u h\u00ecnh c\u1ee5m kafka"},{"location":"issue/need_review/Kafka/zookeeper_kafka_integration/HA_configuration/#kiem-tra-ket-qua","text":"~/kafka/bin/kafka-topics.sh --zookeeper 192.168.2.193 --describe --topic __consumer_offsets Nh\u01b0 v\u1eady, hi\u1ec7n gi\u1edd n\u1ebfu t\u1ea1o topic , ta n\u00ean \u0111\u1ec3 replicate 3 gi\u00fap failover: ~/kafka/bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 3 --partitions 1 --topic rep3","title":"Ki\u1ec3m tra k\u1ebft qu\u1ea3:"},{"location":"issue/need_review/Kafka/zookeeper_kafka_integration/zookeeper/","text":"T\u1ed5ng quan: Zookeeper l\u00e0 m\u1ed9t d\u1ecbch v\u1ee5 d\u00f9ng nh\u1eb1m duy tr\u00ec s\u1ef1 th\u1ed1ng nh\u1ea5t th\u00f4ng tin c\u1ea5u h\u00ecnh c\u1ee7a c\u00e1c service ch\u1ea1y cluster: * distributed configuration management * consensus building through coordination and locks. Zookeeper lu\u00f4n c\u00e0i k\u00e8m khi ta c\u00e0i Kafka, gi\u00fap c\u00e1c kafka-broker \u0111\u1ea1t \u0111\u01b0\u1ee3c s\u1ef1 \u0111\u1ed3ng thu\u1eadn v\u1ec1 c\u00e1c th\u00f4ng tin nh\u01b0: s\u1ed1 l\u01b0\u1ee3ng, id, \u0111\u1ecba ch\u1ec9 c\u1ee7a c\u00e1c broker; m\u1ed7i topic c\u00f3 bao nhi\u00eau partition, m\u1ed7i partition n\u1eb1m t\u1ea1i broker n\u00e0o; khi c\u00f3 reassigne, rebalance topic s\u1ebd th\u1ed1ng nh\u1ea5t chuy\u1ec3n patition v\u1ec1 \u0111\u00e2u, v\u00e0 m\u1ed9t s\u1ed1 th\u00f4ng tin ph\u1ee5 kh\u00e1c V\u1ec1 c\u01a1 b\u1ea3n , \u00fd ngh\u0129a c\u1ee7a zookeeper c\u0169ng gi\u1ed1ng etcd : l\u01b0u c\u00e1c th\u00f4ng tin c\u1ee7a cluster, th\u00f4ng b\u00e1o khi c\u00f3 thay \u0111\u1ed5i. M\u1ed9t so s\u00e1nh 2 service: https://stackshare.io/stackups/etcd-vs-zookeeper C\u00e1c thao t\u00e1c v\u1eadn h\u00e0nh zookeeper c\u0169ng nh\u01b0 etcd, ch\u1ec9 xoay quanh: th\u00eam, s\u1eeda x\u00f3a d\u1eef li\u1ec7u v\u1ec1 c\u1ea5u h\u00ecnh cluster l\u01b0u tr\u00ean zookeeper. T\u1ed5 ch\u1ee9c d\u1eef li\u1ec7u trong zookeeper: D\u1eef li\u1ec7u trong zookeeper t\u1ed5 ch\u1ee9c nh\u01b0 d\u1ea1ng c\u00e2y, c\u00e2y th\u01b0 m\u1ee5c: M\u1ed7i node trong c\u00e2y g\u1ecdi l\u00e0 zNode M\u1ed7i zNode \u0111\u01b0\u1ee3c \u0111\u1ecbnh danh b\u1edfi path \u0111\u1ebfn node. v\u00ed d\u1ee5 \u1edf h\u00ecnh c\u00f3 4 Znode: /; /Zoo; /Zoo/lion; /Zoo/tiger M\u1ed7i zNode c\u00f3 th\u1ec3 ghi m\u1ed9t data (string, byte) M\u1ed7i zNode c\u00f3 th\u1ec3 c\u00f3 c\u00e1c Znode con Ta c\u00f3 th\u1ec3 th\u00eam s\u1eeda x\u00f3a zNode c\u0169ng nh\u01b0 data tr\u00ean node, add node con, tuy nhi\u00ean kh\u00f4ng th\u1ec3 rename node Th\u1ef1c h\u00e0nh : Sau khi c\u00e0i kafka, th\u01b0\u1eddng ta \u0111\u00e3 c\u00f3 zookeeper ch\u1ea1y k\u00e8m, c\u1ed5ng 2181 a) Thao t\u00e1c v\u1edbi console: V\u00e0o th\u01b0 m\u1ee5c c\u00e0i kafka ( ~/kafka), m\u1edf zookeeper console v\u1edbi l\u1ec7nh: bin/zookeeper-shell.sh localhost:2181 Connecting to localhost:2181 Welcome to ZooKeeper! JLine support is disabled WATCHER:: WatchedEvent state:SyncConnected type:None path:null Xem c\u00e1c c\u1ea5u h\u00ecnh m\u1ed9t cluster b\u1ea5t k\u1ef3: l\u1ec7nh ls ls / [cluster, controller, brokers, zookeeper, foo, admin, isr_change_notification, log_dir_event_notification, controller_epoch, kafka-manager, consumers, latest_producer_id_block, config] ls /brokers [ids, topics, seqid] Th\u00eam m\u1ed9t znode zk_test v\u1edbi data test create /zk_test my_data Created /zk_test xem data node /zk_test : get /zk_test my_data ... th\u00eam con child1 v\u00e0o /zk_test : create /zk_test/Child1 firstchild Created /zk_test/Child1 C\u00e1c thao c\u00e1c c\u01a1 b\u1ea3n xem th\u00eam t\u1ea1i: http://www.corejavaguru.com/bigdata/zookeeper/cli b) S\u1eed d\u1ee5ng drashboard: \u0110\u1ec3 thu\u1eadn thi\u1ec7n nhanh ch\u00f3ng ta c\u00f3 th\u1ec3 d\u00f9ng drashboard: docker run -d \\ -p 8080:8080 \\ -e ZK_DEFAULT_NODE=localhost:2181/ \\ -e USER=zookeeper \\ -e PASSWORD=zookeeper \\ --name zk-web \\ -t tobilg/zookeeper-webui Ta s\u1ebd t\u1ea1o ra 1 web-UI l\u1eafng nghe c\u1ed5ng 8080. user:password zookeeper:zookeeper Ch\u1ecdn v\u00e0o host zookeeper : vd 192.168.2.194:2181 . Ta c\u00f3 danh s\u00e1ch c\u00e1c Node n\u1ed1i v\u1edbi root CLick v\u00e0o t\u1eebng node \u0111\u1ec3 xem ti\u1ebfp theo. Th\u00eam s\u1eeda x\u00f3a \u1edf g\u1ea7n ch\u1ed7 footer c\u1ee7a website. S\u1eed d\u1ee5ng zookeeper k\u1ebft h\u1ee3p v\u1edbi kafka","title":"Zookeeper"},{"location":"issue/need_review/Kafka/zookeeper_kafka_integration/zookeeper/#tong-quan","text":"Zookeeper l\u00e0 m\u1ed9t d\u1ecbch v\u1ee5 d\u00f9ng nh\u1eb1m duy tr\u00ec s\u1ef1 th\u1ed1ng nh\u1ea5t th\u00f4ng tin c\u1ea5u h\u00ecnh c\u1ee7a c\u00e1c service ch\u1ea1y cluster: * distributed configuration management * consensus building through coordination and locks. Zookeeper lu\u00f4n c\u00e0i k\u00e8m khi ta c\u00e0i Kafka, gi\u00fap c\u00e1c kafka-broker \u0111\u1ea1t \u0111\u01b0\u1ee3c s\u1ef1 \u0111\u1ed3ng thu\u1eadn v\u1ec1 c\u00e1c th\u00f4ng tin nh\u01b0: s\u1ed1 l\u01b0\u1ee3ng, id, \u0111\u1ecba ch\u1ec9 c\u1ee7a c\u00e1c broker; m\u1ed7i topic c\u00f3 bao nhi\u00eau partition, m\u1ed7i partition n\u1eb1m t\u1ea1i broker n\u00e0o; khi c\u00f3 reassigne, rebalance topic s\u1ebd th\u1ed1ng nh\u1ea5t chuy\u1ec3n patition v\u1ec1 \u0111\u00e2u, v\u00e0 m\u1ed9t s\u1ed1 th\u00f4ng tin ph\u1ee5 kh\u00e1c V\u1ec1 c\u01a1 b\u1ea3n , \u00fd ngh\u0129a c\u1ee7a zookeeper c\u0169ng gi\u1ed1ng etcd : l\u01b0u c\u00e1c th\u00f4ng tin c\u1ee7a cluster, th\u00f4ng b\u00e1o khi c\u00f3 thay \u0111\u1ed5i. M\u1ed9t so s\u00e1nh 2 service: https://stackshare.io/stackups/etcd-vs-zookeeper C\u00e1c thao t\u00e1c v\u1eadn h\u00e0nh zookeeper c\u0169ng nh\u01b0 etcd, ch\u1ec9 xoay quanh: th\u00eam, s\u1eeda x\u00f3a d\u1eef li\u1ec7u v\u1ec1 c\u1ea5u h\u00ecnh cluster l\u01b0u tr\u00ean zookeeper.","title":"T\u1ed5ng quan:"},{"location":"issue/need_review/Kafka/zookeeper_kafka_integration/zookeeper/#to-chuc-du-lieu-trong-zookeeper","text":"D\u1eef li\u1ec7u trong zookeeper t\u1ed5 ch\u1ee9c nh\u01b0 d\u1ea1ng c\u00e2y, c\u00e2y th\u01b0 m\u1ee5c: M\u1ed7i node trong c\u00e2y g\u1ecdi l\u00e0 zNode M\u1ed7i zNode \u0111\u01b0\u1ee3c \u0111\u1ecbnh danh b\u1edfi path \u0111\u1ebfn node. v\u00ed d\u1ee5 \u1edf h\u00ecnh c\u00f3 4 Znode: /; /Zoo; /Zoo/lion; /Zoo/tiger M\u1ed7i zNode c\u00f3 th\u1ec3 ghi m\u1ed9t data (string, byte) M\u1ed7i zNode c\u00f3 th\u1ec3 c\u00f3 c\u00e1c Znode con Ta c\u00f3 th\u1ec3 th\u00eam s\u1eeda x\u00f3a zNode c\u0169ng nh\u01b0 data tr\u00ean node, add node con, tuy nhi\u00ean kh\u00f4ng th\u1ec3 rename node","title":"T\u1ed5 ch\u1ee9c d\u1eef li\u1ec7u trong zookeeper:"},{"location":"issue/need_review/Kafka/zookeeper_kafka_integration/zookeeper/#thuc-hanh","text":"Sau khi c\u00e0i kafka, th\u01b0\u1eddng ta \u0111\u00e3 c\u00f3 zookeeper ch\u1ea1y k\u00e8m, c\u1ed5ng 2181 a) Thao t\u00e1c v\u1edbi console: V\u00e0o th\u01b0 m\u1ee5c c\u00e0i kafka ( ~/kafka), m\u1edf zookeeper console v\u1edbi l\u1ec7nh: bin/zookeeper-shell.sh localhost:2181 Connecting to localhost:2181 Welcome to ZooKeeper! JLine support is disabled WATCHER:: WatchedEvent state:SyncConnected type:None path:null Xem c\u00e1c c\u1ea5u h\u00ecnh m\u1ed9t cluster b\u1ea5t k\u1ef3: l\u1ec7nh ls ls / [cluster, controller, brokers, zookeeper, foo, admin, isr_change_notification, log_dir_event_notification, controller_epoch, kafka-manager, consumers, latest_producer_id_block, config] ls /brokers [ids, topics, seqid] Th\u00eam m\u1ed9t znode zk_test v\u1edbi data test create /zk_test my_data Created /zk_test xem data node /zk_test : get /zk_test my_data ... th\u00eam con child1 v\u00e0o /zk_test : create /zk_test/Child1 firstchild Created /zk_test/Child1 C\u00e1c thao c\u00e1c c\u01a1 b\u1ea3n xem th\u00eam t\u1ea1i: http://www.corejavaguru.com/bigdata/zookeeper/cli b) S\u1eed d\u1ee5ng drashboard: \u0110\u1ec3 thu\u1eadn thi\u1ec7n nhanh ch\u00f3ng ta c\u00f3 th\u1ec3 d\u00f9ng drashboard: docker run -d \\ -p 8080:8080 \\ -e ZK_DEFAULT_NODE=localhost:2181/ \\ -e USER=zookeeper \\ -e PASSWORD=zookeeper \\ --name zk-web \\ -t tobilg/zookeeper-webui Ta s\u1ebd t\u1ea1o ra 1 web-UI l\u1eafng nghe c\u1ed5ng 8080. user:password zookeeper:zookeeper Ch\u1ecdn v\u00e0o host zookeeper : vd 192.168.2.194:2181 . Ta c\u00f3 danh s\u00e1ch c\u00e1c Node n\u1ed1i v\u1edbi root CLick v\u00e0o t\u1eebng node \u0111\u1ec3 xem ti\u1ebfp theo. Th\u00eam s\u1eeda x\u00f3a \u1edf g\u1ea7n ch\u1ed7 footer c\u1ee7a website.","title":"Th\u1ef1c h\u00e0nh :"},{"location":"issue/need_review/Kafka/zookeeper_kafka_integration/zookeeper/#su-dung-zookeeper-ket-hop-voi-kafka","text":"","title":"S\u1eed d\u1ee5ng zookeeper k\u1ebft h\u1ee3p v\u1edbi kafka"},{"location":"issue/need_review/Qdr/","text":"","title":"Qpid_dispatch_route"},{"location":"issue/need_review/Rabbit/","text":"","title":"Rabbit_mq"},{"location":"issue/propose/","text":"","title":"Propose"},{"location":"issue/solved/","text":"","title":"Sloved"}]}